#! /usr/bin/env python
# ****************************************************************************
# Licensed to Qualys, Inc. (QUALYS) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# QUALYS licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ****************************************************************************
import os
import sys
import argparse

class Main( object ) :
    def __init__( self ) :
        self._parser = argparse.ArgumentParser( description="IronBee Trafficserver Setup",
                                                prog="ib-setup-ats" )
        self._ats = os.environ['ATS_ROOT']

    def Setup( self ) :

        self._parser.add_argument('ats', type=str, nargs='?',
                                  help='ATS Directory (default=%s)' % self._ats)

        self._parser.add_argument( "-n", "--no-execute",
                                   action="store_false", dest="execute", default=True,
                                   help="Disable execution" )

        self._parser.add_argument( "-v", "--verbose",
                                   action="count", dest="verbose", default=0,
                                   help="Increment verbosity level" )

        self._parser.add_argument( "-q", "--quiet",
                                   action="store_true", dest="quiet", default=False,
                                   help="be vewwy quiet (I'm hunting wabbits)" )

    def Parse( self ) :
        self._args = self._parser.parse_args()
        if self._args.verbose == 0 and not self._args.execute :
            self._args.verbose = 1

    Execute = property( lambda self : self._args.verbose )
    Verbose = property( lambda self : self._args.verbose )
    Quiet   = property( lambda self : self._args.verbose )

    def Run( self ) :
        if self._args.verbose :
            print "Setting up TrafficServer in", self._ats
        for dirname in ( 'etc', 'tmp', 'var' ) :
            full = os.path.join( self._ats, dirname )
            if not os.path.islink( full ) :
                if os.path.exists( full ) :
                    release = full+".release"
                    assert not os.path.exists( release )
                    os.rename( full, release )
                if self._args.verbose >= 2 :
                    print "Creating", os.path.join('../..',dirname), "symlink to", full
                elif self._args.verbose :
                    print "Creating", dirname, "symlink"
                os.symlink( os.path.join("../..",dirname), full )

    def Main( self ) :
        self.Setup( )
        self.Parse( )
        self.Run( )

main = Main( )
main.Main( )

### Local Variables: ***
### py-indent-offset:4 ***
### python-indent:4 ***
### python-continuation-offset:4 ***
### tab-width:4  ***
### End: ***
