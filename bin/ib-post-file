#! /usr/bin/env python
# ****************************************************************************
# Licensed to Qualys, Inc. (QUALYS) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# QUALYS licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ****************************************************************************
import urllib2
import mmap

from ib.parser.base import *

class _Parser( IbBaseParser ) :
    def __init__( self ) :
        IbBaseParser.__init__( self, 
                               "Program do a large post" )

        self.Parser.add_argument( "url", help='URL to POST to' )
        self.Parser.add_argument( "infile", type=argparse.FileType('rb'), help='file to POST' )
        self.Parser.add_argument( "content_type", help='Content-type' )

        self.Parser.add_argument( "max", nargs='?',
                                  type=int, default=1024,
                                  help="Max reponse data to print" )
        self.Parser.add_argument( "-o", dest="out", default=None,
                                  type=argparse.FileType('wb'),
                                  help='Store response to file' )

class _Main( object ) :
    def __init__( self ) :
        self._parser = _Parser( )

    def _ParseCmdLine( self ) :
        self._args = self._parser.Parse( )

    def _Post( self ) :
        # Open the file as a memory mapped string. Looks like a string, but 
        # actually accesses the file behind the scenes. 
        f = self._args.infile
        mmapped_file_as_string = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)

        # Do the request
        request = urllib2.Request(self._args.url, mmapped_file_as_string)
        request.add_header("Content-Type", self._args.content_type)
        try :
            response = urllib2.urlopen(request)
            data = response.read()
            if self._args.out is not None :
                self._args.out.write( data )
            elif all(ord(c) < 128 for c in data[:self._args.max]) :
                print data[:self._args.max]
        except urllib2.HTTPError as e :
            print e

        #close everything
        mmapped_file_as_string.close()
        f.close()

    def _Main( self ) :
        self._ParseCmdLine( )
        self._Post( )

if __name__ == "__main__" :
    main = _Main( )
    main._Main( )

### Local Variables: ***
### py-indent-offset:4 ***
### python-indent:4 ***
### python-continuation-offset:4 ***
### tab-width:4  ***
### End: ***
