#! /usr/bin/env python
# ****************************************************************************
# Licensed to Qualys, Inc. (QUALYS) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# QUALYS licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ****************************************************************************
import urllib2
from httplib import HTTPConnection
from array import array
import mmap
import time

from ib.util.parser import *

class SlowHttpConnection( HTTPConnection ) :
    _delay = None
    _blocksize = 8192

    @classmethod
    def SetDelay( cls, blocksize, delay ) :
        cls._blocksize = blocksize
        cls._delay = delay

    def send( self, data ) :
        """Send `data' to the server."""
        if self.sock is None:
            if self.auto_open:
                self.connect()
            else:
                raise NotConnected()

        if self.debuglevel > 0:
            print "send:", repr(data)
        blocksize = self._blocksize
        if hasattr(data,'read') and not isinstance(data, array):
            if self.debuglevel > 0: print "sendIng a read()able"
            datablock = data.read(blocksize)
            while datablock:
                if self._delay is not None :
                    time.sleep( self._delay )
                self.sock.sendall(datablock)
                datablock = data.read(blocksize)
        else:
            self.sock.sendall(data)

class SlowHttpHandler(urllib2.HTTPHandler):

    def http_open(self, req):
        return self.do_open(SlowHttpConnection, req)

class _Parser( IbBaseParser ) :
    def __init__( self ) :
        IbBaseParser.__init__( self, 
                               "Program to POST a file" )

        class UrlAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                if ':/' not in  values :
                    parser.error( 'Invalid URL "{:s}"'.format(values) )
                else :
                    namespace.url = values
        self.Parser.add_argument( "url", action=UrlAction, help='URL to POST to' )
        self.Parser.add_argument( "infile", type=argparse.FileType('rb'), help='file to POST' )
        self.Parser.add_argument( "content_type", help='Content-type' )

        class SizeAction(IbBaseParser.SizeAction):
            def SetValue( self, parser, namespace, option_string, value ) :
                namespace.blocksize  = value
        self.Parser.add_argument( "--blocksize", "-b",
                                  action=SizeAction, default=8192,
                                  help="Max block size to send" )
        self.Parser.add_argument( "--delay", "-d",
                                  type=float, default=None,
                                  help="Delay (in seconds) per block <default=None>" )

        self.Parser.add_argument( "max", nargs='?',
                                  type=int, default=1024,
                                  help="Max reponse data to print" )
        self.Parser.add_argument( "-o", dest="out", default=None,
                                  type=argparse.FileType('wb'),
                                  help='Store response to file' )

        self.Parser.add_argument( "--throughput", '-t',
                                  action='store_true', default=False,
                                  help='Output throughput statistics' )
        self.Parser.add_argument( "--units", '-u', choices=('GMK', 'gmk'), default='GMK',
                                  help='Use GMK (base 10) or gmk (base 16) for throughput units' )


class _Main( object ) :
    def __init__( self ) :
        self._parser = _Parser( )

    def _ParseCmdLine( self ) :
        self._args = self._parser.Parse( )

    def _Post( self ) :
        # Open the file as a memory mapped string. Looks like a string, but 
        # actually accesses the file behind the scenes. 
        f = self._args.infile
        mmapped_file_as_string = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
        size = os.fstat(f.fileno()).st_size

        # Do the request
        request = urllib2.Request(self._args.url, mmapped_file_as_string)
        request.add_header("Content-Type", self._args.content_type)
        SlowHttpConnection.SetDelay( self._args.blocksize, self._args.delay )
        handler = SlowHttpHandler( )
        opener = urllib2.build_opener( handler )
        try :
            start = time.time()
            response = opener.open( request )
            finished = time.time()
            if self._args.throughput :
                rate = size / (finished - start)
                ratetxt = None
                if self._args.units == 'GMK' :
                    if rate > 1.1e9 :
                        ratetxt = '{:0.3f}Gbps'.format(rate/1.0e9)
                    elif rate > 1.1e6 :
                        ratetxt = '{:0.3f}Mbps'.format(rate/1.0e6)
                    elif rate > 1.1e3 :
                        ratetxt = '{:0.3f}Kbps'.format(rate/1.0e3)
                    else :
                        ratetxt = '{:0.3f}bps'.format(rate)
                else :
                    if rate > 1.1 * 1024*1024*1024 :
                        ratetxt = '{:0.3f}gbps'.format(rate/(1024*1024*1024))
                    elif rate > 1.1e6 :
                        ratetxt = '{:0.3f}mbps'.format(rate/(1024*1024))
                    elif rate > 1.1e3 :
                        ratetxt = '{:0.3f}kbps'.format(rate/1024)
                    else :
                        ratetxt = '{:0.3f}bps'.format(rate)
                print 'Sent {}b in {}s @ {}'.format(size, finished-start, ratetxt)
            data = response.read()
            if self._args.out is not None :
                self._args.out.write( data )
            elif all(ord(c) < 128 for c in data[:self._args.max]) :
                print data[:self._args.max]
        except urllib2.HTTPError as e :
            print e

        #close everything
        mmapped_file_as_string.close()
        f.close()

    def _Main( self ) :
        self._ParseCmdLine( )
        self._Post( )

if __name__ == "__main__" :
    main = _Main( )
    main._Main( )

### Local Variables: ***
### py-indent-offset:4 ***
### python-indent:4 ***
### python-continuation-offset:4 ***
### tab-width:4  ***
### End: ***
