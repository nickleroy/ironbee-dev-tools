#! /usr/bin/env python
###########################################################################
##
## Copyright(c) 2012 by Nick LeRoy, 310 Jones Ave, Fort Atkinson, WI
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
###########################################################################
import os
import sys
import subprocess
import argparse

class Target( object ) :
    def __init__( self, name, enable=True, targets=None, force_one=False, directory=None ) :
        self._name = name
        self._enabled = enable
        if targets == None :
            self._targets = ( name, )
        else :
            self._targets = targets
        self._force_one = force_one
        self._dir = directory
    Name     = property( lambda self : self._name )
    Enabled  = property( lambda self : self._enabled )
    Targets  = property( lambda self : self._targets )
    ForceOne = property( lambda self : self._force_one )
    Dir      = property( lambda self : self._dir )

    def MakeArgs( self, max_jobs ) :
        args = [ "-j", str(self.NumJobs(max_jobs)) ]
        if self._dir is not None :
            args += [ "-C", self._dir ]
        args += self._targets
        return args

    def NumJobs( self, max_jobs ) :
        return 1 if self._force_one else max_jobs


class Main( object ) :
    def _ParserSetup( self ) :
        self._parser = argparse.ArgumentParser( description="Build IronBee",
                                                prog=os.path.basename(sys.argv[0]) )

        self._parser.add_argument( "--force-make", "-f",
                                   action="store_true", dest="force", default=False,
                                   help="Force make")

        self._parser.add_argument( "--clean",
                                   action="store_true", dest="clean", default=False,
                                   help="Build clean target" )

        self._parser.add_argument( "--check", "--test", "-t",
                                   action="store_true", dest="check", default=False,
                                   help="Build check target" )
        self._parser.add_argument( "--no-check", "--no-test",
                                   action="store_false", dest="check",
                                   help="Don't build check target" )

        self._parser.add_argument( "--install", "-i",
                                   action="store_true", dest="install", default=True,
                                   help="Build install target" )
        self._parser.add_argument( "--no-install",
                                   action="store_false", dest="install",
                                   help="Don't build install target" )

        self._parser.add_argument( "--jobs", "-j",
                                   action="store", type=int, dest="jobs", default=0,
                                   help="Force number of jobs to run" )

        self._parser.add_argument( "--execute",
                                   action="store_true", dest="execute", default=True,
                                   help="Enable execution <default>" )
        self._parser.add_argument( "-n", "--no-execute",
                                   action="store_false", dest="execute",
                                   help="Disable execution (for test/debug)" )
        self._parser.add_argument( "-v", "--verbose",
                                   action="count", dest="verbose", default=0,
                                   help="Increment verbosity level" )
        self._parser.add_argument( "-q", "--quiet",
                                   action="store_true", dest="quiet", default=False,
                                   help="be vewwy quiet (I'm hunting wabbits)" )

    def _CalcMaxJobs( self ) :
        cpus = 0
        for line in open( "/proc/cpuinfo" ) :
            if line.startswith("processor") :
                cpus += 1
        return (cpus / 2) if cpus >= 2 else 1

    def _ParseArgs( self ) :
        self._args = self._parser.parse_args()

        if (self._args.jobs == 0) :
            self._args.jobs = self._CalcMaxJobs( )

    def _RunMake( self, target ) :
        if not target.Enabled :
            return

        cmd = [ "/usr/bin/make" ]
        cmd += target.MakeArgs(self._args.jobs)

        if not self._args.execute :
            print "Not running:", cmd
            return

        if not self._args.quiet :
            print "Running:", cmd

        status = subprocess.call( cmd )
        if status != 0 :
            sys.exit( status )

    def Main( self ) :
        self._ParserSetup( )
        self._ParseArgs( )
        targets = ( Target("clean", enable=self._args.clean, force_one=True),
                    Target("libs"),
                    Target("default", targets=[ ]),
                    Target("install", self._args.install, force_one=True),
                    Target("check",  self._args.check),
        )
        for target in targets :
            self._RunMake( target )

main = Main()
main.Main( )
