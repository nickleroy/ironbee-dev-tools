#! /usr/bin/env python
###########################################################################
##
## Copyright(c) 2012 by Nick LeRoy, 310 Jones Ave, Fort Atkinson, WI
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
###########################################################################
import os
import sys
import shutil
import glob
import math
import argparse
import subprocess
import collections
from functools import partial

class Target( object ) :
    def __init__( self, name, targets=None, force_one=False, pre_fn=None,
                  flags=None, directory=None ) :
        self._name = name
        self._targets = ( name, ) if targets is None else targets
        self._flags = ( ) if flags is None else flags
        self._force_one = force_one
        self._pre_fn = pre_fn
        self._dir = directory
        self._enabled = True
    def _SetEnabled( self, enabled ) :
        self._enabled = enabled
    Name     = property( lambda self : self._name )
    Enabled  = property( lambda self : self._enabled, _SetEnabled )
    Targets  = property( lambda self : self._targets )
    ForceOne = property( lambda self : self._force_one )
    Dir      = property( lambda self : self._dir )
    Flags    = property( lambda self : self._flags )

    def SetPreExec( self, pre_fn ) :
        self._pre_fn = pre_fn

    def PreExec( self, p ) :
        if self._pre_fn is not None :
            self._pre_fn( p )

    def MakeArgs( self, max_jobs ) :
        args = [ "-j", str(self.NumJobs(max_jobs)) ]
        if self._dir is not None :
            args += [ "-C", self._dir ]
        args += self._targets
        return args

    def NumJobs( self, max_jobs ) :
        return 1 if self._force_one else max_jobs

    def FlagEnable( self, flag, enabled ) :
        if flag in self._flags  and  enabled is not None :
            self.Enabled = enabled


class Targets( object ) :
    def __init__( self, targets ) :
        self._targets = targets
        self._byname = { }
        for t in targets :
            self._byname[t.Name] = t

    def AddTarget( self, target ) :
        self._targets.append( target )
        self._byname[target.Name] = target

    def Target( self, name ) :
        return self._byname[name]

    def FlagEnable( self, flag, enabled ) :
        name = flag.replace("target_", "")
        for target in self._targets :
            target.FlagEnable( name, enabled )

    def Targets( self, fn=None ) :
        for target in self._targets :
            if fn is None  or  fn(target) :
                yield target
        return

class Main( object ) :
    @classmethod
    def InitMain( cls ) :
        if "_targets" in dir(cls) :
            return
        targets = Targets( (Target("clean", flags=("clean",), force_one=True,
                                   pre_fn=lambda self:self._Confirm("make clean") ),
                            Target("libs", targets=tuple(), directory="libs", flags=("default",) ),
                            Target("all", flags=("default",), targets=[ ]),
                            Target("install", flags=("install","default"), force_one=True),
                            Target("check",  flags=("check","default") ),
                            Target("doxygen",  flags=("doxygen",), force_one=True),
                            Target("rpm", targets=("rpm-package",), flags=("rpm",) ),) )
        cls._targets = targets
        
    def __init__( self ) :
        Main.InitMain()

    def _ParserSetup( self ) :
        self._parser = argparse.ArgumentParser( description="Build IronBee",
                                                prog=os.path.basename(sys.argv[0]) )

        self._parser.add_argument( "--force-make", "-f",
                                   action="store_true", dest="force", default=False,
                                   help="Force make / wipe")
        self._parser.add_argument( "--no-force",
                                   action="store_false", dest="force",
                                   help="Don't force make / wipe" )

        self._parser.add_argument( "--clean",
                                   action="store_true", dest="clean", default=False,
                                   help="Build clean target" )

        self._parser.add_argument( "--wipe",
                                   action="store_true", dest="wipe", default=False,
                                   help="Wipe directory & run confgen (implies --confgen)" )

        self._parser.add_argument( "--confgen",
                                   action="store_true", dest="confgen", default=False,
                                   help="Run confgen before building" )

        self._parser.add_argument( "--autogen",
                                   action="store_true", dest="autogen", default=False,
                                   help="Autogen before building (implies --confgen)" )

        self._parser.add_argument( "--check", "--test", "-t",
                                   action="store_true", dest="check", default=False,
                                   help="Build check target" )
        self._parser.add_argument( "--no-check", "--no-test",
                                   action="store_false", dest="check",
                                   help="Don't build check target" )

        self._parser.add_argument( "--install", "-i",
                                   action="store_true", dest="install", default=True,
                                   help="Build install target" )
        self._parser.add_argument( "--no-install",
                                   action="store_false", dest="install",
                                   help="Don't build install target" )

        self._parser.add_argument( "--rpm",
                                   action="store_true", dest="rpm", default=False,
                                   help="Build rpm-package target" )
        self._parser.add_argument( "--no-rpm",
                                   action="store_false", dest="rpm",
                                   help="Don't build rpm-package target" )

        self._parser.set_defaults( doxygen=False, default=None )
        class DoxygenAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                namespace.doxygen = True
                if "only" in option_string :
                    namespace.default = False
        self._parser.add_argument( "--doxygen", "--docs",
                                   action=DoxygenAction, nargs=0,
                                   help="Build doxygen target" )
        self._parser.add_argument( "--doxygen-only", "--docs-only",
                                   action=DoxygenAction, nargs=0,
                                   help="Build only doxygen target" )

        self._parser.add_argument( "--jobs", "-j",
                                   action="store", type=int, dest="jobs", default=0,
                                   help="Force number of # jobs to run" )
        self._parser.add_argument( "-1",
                                   action="store_const", dest="jobs", const=1,
                                   help="Force number of # jobs to run to 1 (-j 1)" )

        class AggressionAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                if values is not None :
                    namespace.aggression = values
                else :
                    namespace.aggression = 1.0
                if option_string in ("--nice-aggressive", "--na", "-na") :
                    namespace.nice = 10
        self._parser.set_defaults( aggression=-1.0 )
        self._parser.add_argument( "--aggressive", "-a",
                                   action=AggressionAction, type=float, nargs='?',
                                   help="Set the number of make jobs aggressively [<aggression mult>]" )
        self._parser.add_argument( "--nice-aggressive", "--na", "-na",
                                   action=AggressionAction, type=float, nargs='?',
                                   help="Like --aggressive, but with default niceness (10)" )

        class NiceAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                if values is not None :
                    namespace.nice = values
                else :
                    namespace.nice = 10
        self._parser.set_defaults( nice=0 )
        self._parser.add_argument( "--nice",
                                   action=NiceAction, type=int, nargs='?',
                                   help="Run make under \"nice\" [<niceness>]" )

        self._parser.add_argument( "--execute",
                                   action="store_true", dest="execute", default=True,
                                   help="Enable execution <default>" )

        self._parser.add_argument( "--confirm",
                                   action="store_true", dest="confirm", default=False,
                                   help="Confirm before doing anything <default=off>" )

        self._parser.add_argument( "-n", "--no-execute",
                                   action="store_false", dest="execute",
                                   help="Disable execution (for test/debug)" )
        self._parser.add_argument( "-v", "--verbose",
                                   action="count", dest="verbose", default=0,
                                   help="Increment verbosity level" )
        self._parser.add_argument( "-q", "--quiet",
                                   action="store_true", dest="quiet", default=False,
                                   help="be vewwy quiet (I'm hunting wabbits)" )

    def _CalcMaxJobs( self ) :
        cpus = 0
        for line in open( "/proc/cpuinfo" ) :
            if line.startswith("processor") :
                cpus += 1
        aggression = 0.5 if self._args.aggression < 0.5 else self._args.aggression
        return int(math.floor((cpus * aggression) + 0.5))

    def _ParseArgs( self ) :
        self._args = self._parser.parse_args()
        for key,value in vars(self._args).items() :
            self._targets.FlagEnable( key, value )
        if self._args.wipe or self._args.autogen :
            self._args.confgen = True
        if (self._args.jobs == 0) :
            self._args.jobs = self._CalcMaxJobs( )


    def _RunCommand( self, cmd, cwd=None, execute=True, no_exec_flag=None ) :
        fromdir = "" if cwd is None else "from "+cwd
        if not self._args.execute  or  not execute :
            if no_exec_flag is None:
                print "Not running:", cmd
                return 0
            else :
                cmd += [ no_exec_flag ]

        if not self._args.quiet :
            print "Running:", cmd

        status = subprocess.call( cmd, cwd=cwd )
        return status

    def _BuildTarget( self, target, execute=False ) :
        target.PreExec( self )
        cmd = [ ]
        if self._args.nice :
            cmd += [ "/usr/bin/nice", "-"+str(self._args.nice) ]
        cmd += [ "/usr/bin/make" ]
        cmd += target.MakeArgs(self._args.jobs)

        status = self._RunCommand( cmd, execute=execute )
        if status != 0 :
            sys.exit( status )

    def _BuildAll( self, execute ) :
        for target in self._targets.Targets( lambda target:target.Enabled ) :
            self._BuildTarget( target, execute=execute )

    def _Confirm( self, what, prefix=None ) :
        if not self._args.force :
            if prefix :
                ans = raw_input( "%s  Really %s? " % (prefix, what) )
            else :
                ans = raw_input( "Really %s? " % what )
            if not ans.startswith( ('y', 'Y') ) :
                sys.exit( 1 )

    __wipe_checks = (
        'configure.ac',
        'Makefile.am',
        'VERSION',
        'INSTALL',
    )
    def _Wipe( self, execute ) :
        globs = glob.glob('*')
        if len(globs) == 0 :
            return
        if execute  and  self._args.execute :
            self._Confirm("wipe")
        for name in self.__wipe_checks :
            exists = os.path.isfile(name)
            link = os.path.islink(name)
            if exists and not link :
                self._Confirm("wipe", name+" exists.")
        self._RunCommand( ["rm", "-fr"] + globs, execute=execute )

    def _CopyTreeIgnore( dirpath, dirents ) :
        out = []
        for de in dirents :
            if not de.startswith(".git") :
                out.append(de)
        return out

    def _CopyTree( self ) :
        globs = glob.glob('*')
        if len(globs) != 0 :
            self._Confirm("overwrite")
        shutil.copytree( )

    def _AutoGen( self, execute ) :
        self._RunCommand( ["./autogen.sh",], cwd=os.environ["IB_ROOT"], execute=execute )

    def _ConfGen( self, execute ) :
        self._RunCommand( ["confgen"], execute=execute, no_exec_flag='--no-execute' )

    def _Run( self, execute ) :
        v = vars(self._args)
        for name,fn in self._pre_cmds.items() :
            if v[name] :
                fn( execute )
        self._BuildAll( execute )

    def Main( self ) :
        self._pre_cmds = collections.OrderedDict(
            ( ('wipe', self._Wipe),
              ('autogen', self._AutoGen),
              ('confgen', self._ConfGen), )
        )
        self._ParserSetup( )
        self._ParseArgs( )
        if self._args.confirm :
            self._Run( False )
            self._Confirm("build")
        self._Run( True )


main = Main()
main.Main( )
