#! /usr/bin/env python
# ****************************************************************************
# Licensed to Qualys, Inc. (QUALYS) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# QUALYS licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ****************************************************************************
import os
import sys
import re
import shutil
import glob
import math
import time
import argparse
import subprocess
import collections
import pprint
from functools import partial

class BaseTarget( object ) :
    def __init__( self, name, phase=None, flags=None ) :
        assert type(name) == str
        assert type(phase) == int
        self._enabled = True
        assert name != None
        assert phase != None
        self._name = name
        self._phase = phase
        self._flags = self._MakeTuple(flags)

    @staticmethod
    def _MakeList( args, alt=None ) :
        if args is None  and  alt is None :
            return [ ]
        elif args is None :
            args = alt
        if type(args) in (list,tuple) :
            return list(args)
        else :
            return [ args ]

    @staticmethod
    def _MakeTuple( args, alt=None ) :
        if args is None  and  alt is None :
            return ( )
        elif args is None :
            args = alt
        if type(args) in (list,tuple) :
            return tuple(args)
        else :
            return ( args, )

    def _SetEnabled( self, enabled ) :
        self._enabled = enabled

    def FlagEnable( self, flag, enabled ) :
        if flag in self._flags  and  enabled is not None :
            self.Enabled = enabled

    Name       = property( lambda self : self._name )
    Phase      = property( lambda self : self._phase )
    Enabled    = property( lambda self : self._enabled, _SetEnabled )
    Flags      = property( lambda self : self._flags )


class FuncTarget( BaseTarget ) :
    def __init__( self, name, phase, flags, fn, *args, **kwargs) :
        BaseTarget.__init__( self, name, phase, flags )
        self._fn = fn
        self._args = args
        self._kwargs = kwargs

    def Exec( self, *_args, **_kwargs ) :
        args = list(self._args)
        args += _args
        kwargs = self._kwargs.copy()
        kwargs.update(_kwargs)
        return self._fn(*args, **kwargs)

    def ExecPreFunc( self, *args, **kwargs ) :
        return (True, [])

    def __str__( self ) :
        return 'Func Target "%s": Phase=%d Flags=%s fn=%s Enabled=%s' % \
            ( self.Name, self.Phase, str(self.Flags),
              str(self._fn), str(self.Enabled) )


class ExecTarget( BaseTarget ) :
    def __init__( self, name, phase, flags, pre_fn=None, argv=None, cwd=None ) :
        BaseTarget.__init__( self, name, phase, flags )
        self._argv = self._MakeList(argv)
        self._cwd = cwd
        self._pre_fn = pre_fn

    def _GetExec( self ) :
        return self._argv[0] if len(self._argv) else None

    def _SetExec( self, executable ) :
        if len(self._argv) :
            self._argv[0] = executable
        else :
            self._argv = [ executable ]

    def _SetArgv( self, argv ) :
        self._argv = []
        self._AddArgs( argv )

    def AddArgs( self, args ) :
        self._argv += self._MakeList(args)

    def GetCommand( self, nice=None, prefix=None, args=None ) :
        command = []
        if nice is not None  and  nice != 0 :
            command += [ "/usr/bin/nice", "-"+str(nice) ]
        if prefix is not None :
            command += self._MakeList( prefix )
        command += self._argv
        command += self._MakeList( args )
        return command

    def _SetCwd( self, cwd ) :
        self._cwd = cwd

    def _SetPreFunc( self, pre_fn ) :
        self._pre_fn = pre_fn

    def ExecPreFunc( self, *args, **kwargs ) :
        if self._pre_fn is None :
            return (True, [])
        return self._pre_fn( *args, **kwargs )

    Argv       = property( lambda self : self._argv, _SetArgv )
    Command    = property( lambda self : self.GetCommand() )
    Executable = property( _GetExec, _SetExec )
    Cwd        = property( lambda self : self._cwd, _SetCwd )
    PreFunc    = property( lambda self : self._pre_fn, _SetPreFunc )

    def __str__( self ) :
        return 'Exec Target "%s": Phase=%d Flags=%s Dir=%s PreFunc=%s Enabled=%s' % \
            ( self.Name, self.Phase, str(self.Flags),
              self.Cwd, str(self.PreFunc), str(self.Enabled) )


class MakeTarget( ExecTarget ) :
    def __init__( self, name, phase, flags, pre_fn=None, targets=None, force_one=False,
                  directory=None ) :
        ExecTarget.__init__( self, name, phase, flags, pre_fn, "/usr/bin/make" )
        self._dir = directory
        self._targets = self._MakeTuple(targets, name)
        self._force_one = force_one

    def GetMakeCommand( self, execute, max_jobs, nice=None, prefix=None ) :
        args = [ ]
        if not execute :
            args += [ "-n" ]
        args += [ "-j", str(self.NumJobs(max_jobs)) ]
        if self._dir is not None :
            args += [ "-C", self._dir ]
        args += self.Targets
        return self.GetCommand( nice, prefix, args )

    def NumJobs( self, max_jobs ) :
        return 1 if self._force_one else max_jobs

    Dir        = property( lambda self : self._dir )
    Name       = property( lambda self : self._name )
    Targets    = property( lambda self : self._targets )
    ForceOne   = property( lambda self : self._force_one )

    def Copy( self, name, targets=None, phase=None, pre_fn=None, flags=None, directory=None ) :
        assert name != self.Name
        if targets   is None : targets = self.Targets
        if phase     is None : phase = self.Phase
        if pre_fn    is None : pre_fn = self.PreFunc
        if flags     is None : flags = self.Flags
        if directory is None : directory = self.Dir
        return MakeTarget(name, phase, flags, pre_fn, targets, self.ForceOne, directory)

    def __str__( self ) :
        return 'Make Target "%s": Phase=%d Flags=%s Targets=%s One=%s Dir=%s PreFunc=%s Enabled=%s' % \
            ( self.Name, self.Phase, str(self.Flags), str(self.Targets), str(self.ForceOne),
              self.Dir, str(self.PreFunc), str(self.Enabled) )


class Targets( object ) :
    def __init__( self, targets ) :
        self._targets = list(targets)
        self._byname = { }
        for t in targets :
            assert isinstance(t, BaseTarget)
            self._byname[t.Name] = t

    def AddTarget( self, target ) :
        self._targets.append( target )
        self._byname[target.Name] = target

    def Target( self, name ) :
        return self._byname[name]

    def FlagEnable( self, flag, enabled ) :
        name = flag.replace("target_", "")
        for target in self._targets :
            target.FlagEnable( name, enabled )

    def Targets( self, fn=None ) :
        for target in sorted(self._targets, key=lambda tgt: tgt.Phase) :
            if fn is None  or  fn(target) :
                yield target
        return
    def __str__( self ) :
        s = "Targets (%d):\n" % len(self._byname)
        for target in sorted(self._targets, key=lambda tgt: tgt.Phase) :
            s += "  "+str(target)+"\n"
        return s

class BuildTimer( object ) :
    def __init__( self, target, start ) :
        self._target = target
        self._started = None
        self._finished = None
        if start :
            self.Start()
    Started = property( lambda self : self._started )
    Finished = property( lambda self : self._finished )
    def Start( self ) :
        self._started = time.time()
    def Stop( self, _print ) :
        self._finished = time.time()
        if _print :
            self.Print( )
    def _FormatTime( self, seconds ) :
        return time.strftime( "%H:%M:%S", time.localtime(seconds) )
    def Print( self ) :
        assert self._started is not None and self._finished is not None
        print "%s: started at %s, finished at %s, elapsed %.1fs" % \
            (self._target.Name,
             self._FormatTime(self._started),
             self._FormatTime(self._finished),
             (self._finished - self._started))

class BuildTimers( object ) :
    def __init__( self, enable ) :
        self._timers = []
        self._enable = enable
    def AddTarget( self, target, start ) :
        if self._enable :
            timer = BuildTimer( target, start )
            self._timers.append( timer )
            return timer
        return None
    def GetTimer( self, n ) :
        assert n is not None
        try :
            return self._timers[n]
        except IndexError :
            return None
    def StopTimer( self, n ) :
        timer = self.GetTimer( n )
        if timer is not None :
            timer.Stop( False )
    def PrintTimer( self, timer=None, n=None ) :
        if timer is None :
            timer = self.GetTimer( n )
        if timer is not None :
            timer.Print()
    def PrintAll( self ) :
        for timer in sorted( self._timers, key=lambda t : t.Finished ) :
            self.PrintTimer( timer )

class Main( object ) :
    @classmethod
    def InitMain( cls ) :
        if "_targets" in dir(cls) :
            return
        targets = Targets(
            (
                ExecTarget('autogen', phase=0, flags="autogen",
                           argv=["./autogen.sh"], cwd=os.environ["IB_ROOT"],
                           pre_fn=lambda self:self._Confirm("run autogen") ),
                ExecTarget("wipe",    phase=0, flags="wipe",
                           argv=["rm", "-fr"], pre_fn=Main._PreWipe ),
                MakeTarget("clean",   phase=0, flags=("clean","clean_root"), force_one=True,
                           pre_fn=lambda self:self._Confirm("make clean") ),
                FuncTarget('Makefiles', phase=1, flags="default",
                           fn=lambda self,execute:self._RefreshMakefiles(execute)),
                ExecTarget('confgen', phase=1, flags="confgen", argv=["confgen","-i"],
                           pre_fn=lambda self:self._Confirm("run confgen") ),
                MakeTarget("libs",    phase=2, targets=[],
                           directory="libs", flags="default" ),
                MakeTarget("all",     phase=3, flags="default", targets=[] ),
                MakeTarget("install", phase=4, flags=("install","default"), force_one=True),
                MakeTarget("check",   phase=5, flags=("check","default") ),
                MakeTarget("doxygen", phase=6, flags="doxygen", force_one=True),
                MakeTarget("rpm",     phase=6, flags="rpm", targets="rpm-package" ),
            )
        )
        cls._targets = targets

    def __init__( self ) :
        Main.InitMain()

    def _ParserSetup( self ) :
        self._parser = argparse.ArgumentParser( description="Build IronBee",
                                                prog=os.path.basename(sys.argv[0]) )


        self._parser.add_argument( "--dir", "-C",
                                   action="store", dest="directory", default=None,
                                   help="Specify build directory")

        self._parser.add_argument( "--force-make", "-f",
                                   action="store_true", dest="force", default=False,
                                   help="Force make / wipe")
        self._parser.add_argument( "--no-force",
                                   action="store_false", dest="force",
                                   help="Don't force make / wipe" )
        self._parser.add_argument( "--keep-going", "-k",
                                   action="store_true", dest="keep_going", default=False,
                                   help="Keep going to make")
        self._parser.add_argument( "--yes", "-y",
                                   action="store_true", dest="defaultyn", default=False,
                                   help="Set default confirm answer to \"yes\"" )
        self._parser.add_argument( "--no",
                                   action="store_false", dest="defaultyn",
                                   help="Set default confirm answer to \"no\"" )

        cgroup = self._parser.add_mutually_exclusive_group( )
        self._parser.set_defaults( clean=False, clean_root=False, clean_dirs=set() )
        class CleanAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                namespace.clean = True
                for s in values :
                    namespace.clean_dirs.add(s)

        cgroup.add_argument( "--clean", "-c",
                             action=CleanAction, nargs='*',
                             choices=('engine', 'libs', 'modules', 'util', 'servers'),
                             help="'make clean' [dir [dir..]]")
        cgroup.add_argument( "--wipe",
                             action="store_true", dest="wipe", default=False,
                             help="Wipe directory & run confgen (implies --confgen)" )

        self._parser.add_argument( "--confgen",
                                   action="store_true", dest="confgen", default=False,
                                   help="Run confgen before building" )

        self._parser.add_argument( "--autogen",
                                   action="store_true", dest="autogen", default=False,
                                   help="Autogen before building (implies --confgen)" )

        self._parser.add_argument( "--check", "--test", "-t",
                                   action="store_true", dest="check", default=False,
                                   help="Build check target" )
        self._parser.add_argument( "--no-check", "--no-test",
                                   action="store_false", dest="check",
                                   help="Don't build check target" )

        self._parser.add_argument( "--install", "-i",
                                   action="store_true", dest="install", default=True,
                                   help="Build install target" )
        self._parser.add_argument( "--no-install",
                                   action="store_false", dest="install",
                                   help="Don't build install target" )

        self._parser.add_argument( "--rpm",
                                   action="store_true", dest="rpm", default=False,
                                   help="Build rpm-package target" )
        self._parser.add_argument( "--no-rpm",
                                   action="store_false", dest="rpm",
                                   help="Don't build rpm-package target" )

        self._parser.set_defaults( doxygen=False, default=None )
        class DoxygenAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                namespace.doxygen = True
                if option_string in ( "--doxygen-only", "--docs-only", "-do" ) :
                    namespace.default = False
                    namespace.install = False
        self._parser.add_argument( "--doxygen", "--docs",
                                   action=DoxygenAction, nargs=0,
                                   help="Build doxygen target" )
        self._parser.add_argument( "--doxygen-only", "--docs-only", "--do",
                                   action=DoxygenAction, nargs=0,
                                   help="Build only doxygen target" )

        self._parser.add_argument( "--jobs", "-j",
                                   action="store", type=int, dest="max_jobs", default=0,
                                   help="Force number of # jobs to run" )
        self._parser.add_argument( "-1",
                                   action="store_const", dest="max_jobs", const=1,
                                   help="Force number of # jobs to run to 1 (-j 1)" )

        class AggressionAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                if values is not None :
                    namespace.aggression = values
                else :
                    namespace.aggression = 1.0
                if option_string in ("--nice-aggressive", "--na", "-na") :
                    namespace.nice = 10
        self._parser.set_defaults( aggression=-1.0 )
        self._parser.add_argument( "--aggressive", "-a",
                                   action=AggressionAction, type=float, nargs='?',
                                   help="Set the number of make jobs aggressively [<aggression mult>]" )
        self._parser.add_argument( "--nice-aggressive", "--na", "-na",
                                   action=AggressionAction, type=float, nargs='?',
                                   help="Like --aggressive, but with default niceness (10)" )

        class NiceAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                if values is not None :
                    namespace.nice = values
                else :
                    namespace.nice = 10
        self._parser.set_defaults( nice=0 )
        self._parser.add_argument( "--nice",
                                   action=NiceAction, type=int, nargs='?',
                                   help="Run make under \"nice\" [<niceness>]" )

        self._parser.add_argument( "--execute",
                                   action="store_true", dest="execute", default=True,
                                   help="Enable execution <default>" )

        self._parser.add_argument( "--confirm",
                                   action="store_true", dest="confirm", default=False,
                                   help="Confirm before doing anything <default=off>" )

        self._parser.add_argument( "--timing", "-T",
                                   action="store_true", dest="timing", default=True,
                                   help="Print timing information <default=on>" )
        self._parser.add_argument( "--no-timing",
                                   action="store_false", dest="timing",
                                   help="Disable timing information" )

        self._parser.add_argument( "-n", "--no-execute",
                                   action="store_false", dest="execute",
                                   help="Disable execution (for test/debug)" )
        self._parser.add_argument( "-v", "--verbose",
                                   action="count", dest="verbose", default=0,
                                   help="Increment verbosity level" )
        self._parser.add_argument( "-q", "--quiet",
                                   action="store_true", dest="quiet", default=False,
                                   help="be vewwy quiet (I'm hunting wabbits)" )

    def _Target( self, name ) :
        return self._targets.Target( name )

    def _CalcMaxJobs( self ) :
        cores = set()
        compiled = re.compile( r'core id\s+:\s+(\d+)' )
        for line in open( "/proc/cpuinfo" ) :
            m = compiled.match( line )
            if m is not None :
                cores.add( m.group(1) )
        aggression = 0.5 if self._args.aggression < 0.5 else self._args.aggression
        v = int(math.floor((len(cores) * aggression) + 0.5))
        return 1 if v < 1 else v

    def _ParseArgs( self ) :
        self._args = self._parser.parse_args()
        args = vars(self._args)

        d = args['directory']
        if d is not None :
            try :
                os.chdir(d)
            except OSError as e :
                print >> sys.stderr, "Failed to chdir to "+d+":", e
                sys.exit(1)

        self._args.clean_root = self._args.clean and (len(self._args.clean_dirs) == 0)
        for d in self._args.clean_dirs :
            clean = self._Target( 'clean' )
            flag = "clean_"+d
            target = clean.Copy( "clean-"+d, flags=("clean",flag), directory=d,
                                 pre_fn=lambda self:self._Confirm("make clean in "+d) )
            self._targets.AddTarget( target )
            args[flag] = True
        if self._args.verbose >= 2 :
            pp = pprint.PrettyPrinter( )
            pp.pprint( args )

        for key,value in args.items() :
            self._targets.FlagEnable( key, value )
        if self._args.wipe or self._args.autogen :
            self._args.confgen = True
        if self._args.max_jobs == 0 :
            self._args.max_jobs = self._CalcMaxJobs( )

        if self._args.verbose >= 2 :
            print str(self._targets)


    def _RunCommand( self, cmd, cwd=None, execute=True ) :
        fromdir = "" if cwd is None else "from "+cwd
        if not self._args.execute  or  not execute :
            print "Not running:", cmd
            return 0
        if not self._args.quiet :
            print "Running:", cmd

        status = subprocess.call( cmd, cwd=cwd )
        return status

    def _RefreshMakefiles( self, execute ) :
        for name in ['.'] + os.listdir( "." ) + glob.glob('*/tests') :
            if not os.path.isdir( name ) :
                continue
            if not os.path.exists( os.path.join(name, "Makefile") ) :
                continue
            target = MakeTarget( "Makefile", phase=1, force_one=True, flags="",
                                 directory=name, targets=["Makefile"] )
            self._BuildTarget( target, execute )
        return 0

    def _BuildTarget( self, target, execute=False ) :
        (run, args) = target.ExecPreFunc( self )
        if not run :
            execute=False
        if type(target) == FuncTarget :
            status = target.Exec( self, execute )
            cmd = None
        elif type(target) == MakeTarget :
            cmd = target.GetMakeCommand( execute, self._args.max_jobs, self._args.nice )
            if self._args.keep_going :
                cmd.append( '-k' )
            execute = True
        else :
            cmd = target.GetCommand( self._args.nice, args=args )
        if cmd is not None :
            status = self._RunCommand( cmd, execute=execute )
        if status != 0 :
            sys.exit( status )

    def _BuildAll( self, execute ) :
        timers = BuildTimers( execute and self._args.timing )
        timers.AddTarget( BaseTarget('BUILD', 0), True )
        for target in self._targets.Targets( lambda target:target.Enabled ) :
            timers.AddTarget( target, True )
            self._BuildTarget( target, execute=execute )
            timers.StopTimer( -1 )
        timers.StopTimer( 0 )
        timers.PrintAll()

    def _Confirm( self, what, prefix=None ) :
        if self._args.force :
            return (True, [])
        default = "Y" if self._args.defaultyn else "N"
        if prefix :
            ans = raw_input( "%s  Really %s (yes/no/skip) [%s]? " % (prefix, what, default) )
        else :
            ans = raw_input( "Really %s (yes/no/skip) [%s]? " % (what, default) )
        yes  = ans.startswith( ('y', 'Y') )
        no   = ans.startswith( ('n', 'N') )
        skip = ans.startswith( ('s', 'S') )
        if self._args.defaultyn and no :
            sys.exit( 1 )
        elif not self._args.defaultyn and not (yes or skip) :
            sys.exit( 1 )
        return (not skip, [])

    __wipe_checks = (
        'configure.ac',
        'Makefile.am',
        'VERSION',
        'INSTALL',
    )
    def _PreWipe( self ) :
        globs = glob.glob('*')
        if len(globs) == 0 :
            return (False, [])
        (run, args) = self._Confirm("wipe")
        if not run :
            return (False, [])
        for name in self.__wipe_checks :
            exists = os.path.isfile(name)
            link = os.path.islink(name)
            if exists and not link :
                (run, args) = self._Confirm("wipe", name+" exists.")
                if not run :
                    return (False, [])
        return (True, globs )

    def _CopyTreeIgnore( dirpath, dirents ) :
        out = []
        for de in dirents :
            if not de.startswith(".git") :
                out.append(de)
        return out

    def _CopyTree( self ) :
        globs = glob.glob('*')
        if len(globs) != 0 :
            run, args = self._Confirm("overwrite")
            if not run :
                return
        shutil.copytree( )

    def Main( self ) :
        self._ParserSetup( )
        self._ParseArgs( )
        if self._args.confirm :
            self._Run( False )
            self._Confirm("build")
        self._BuildAll( True )


main = Main()
main.Main( )
