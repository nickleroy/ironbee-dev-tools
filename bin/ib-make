#! /usr/bin/env python
###########################################################################
##
## Copyright(c) 2012 by Nick LeRoy, 310 Jones Ave, Fort Atkinson, WI
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
###########################################################################
import os
import sys
import subprocess
import argparse
import glob

class Target( object ) :
    def __init__( self, name, targets=None, force_one=False, flags=None, directory=None ) :
        self._name = name
        self._targets = ( name, ) if targets is None else targets
        self._flags = ( ) if flags is None else flags
        self._force_one = force_one
        self._dir = directory
        self._enabled = True
    def _SetEnabled( self, enabled ) :
        self._enabled = enabled
    Name     = property( lambda self : self._name )
    Enabled  = property( lambda self : self._enabled, _SetEnabled )
    Targets  = property( lambda self : self._targets )
    ForceOne = property( lambda self : self._force_one )
    Dir      = property( lambda self : self._dir )
    Flags    = property( lambda self : self._flags )

    def MakeArgs( self, max_jobs ) :
        args = [ "-j", str(self.NumJobs(max_jobs)) ]
        if self._dir is not None :
            args += [ "-C", self._dir ]
        args += self._targets
        return args

    def NumJobs( self, max_jobs ) :
        return 1 if self._force_one else max_jobs

    def FlagEnable( self, flag, enabled ) :
        if flag in self._flags  and  enabled is not None :
            self.Enabled = enabled


class Targets( object ) :
    def __init__( self, targets ) :
        self._targets = targets

    def AddTarget( self, target ) :
        self._targets.append( target )
        self._byname[target.Name] = target

    def FlagEnable( self, flag, enabled ) :
        for target in self._targets :
            target.FlagEnable( flag, enabled )

    def Targets( self, fn=None ) :
        for target in self._targets :
            if fn is None  or  fn(target) :
                yield target
        return
                

class Main( object ) :
    _targets = Targets( (Target("clean", flags=("clean",), force_one=True),
                         Target("libs", flags=("default",) ),
                         Target("default", flags=("default",), targets=[ ]),
                         Target("install", flags=("install","default"), force_one=True),
                         Target("check",  flags=("check","default") ),
                         Target("doxygen",  flags=("doxygen",), force_one=True),) )

    def _ParserSetup( self ) :
        self._parser = argparse.ArgumentParser( description="Build IronBee",
                                                prog=os.path.basename(sys.argv[0]) )

        self._parser.add_argument( "--force-make", "-f",
                                   action="store_true", dest="force", default=False,
                                   help="Force make / wipe")
        self._parser.add_argument( "--no-force",
                                   action="store_false", dest="force",
                                   help="Don't force make / wipe" )

        self._parser.add_argument( "--clean",
                                   action="store_true", dest="clean", default=False,
                                   help="Build clean target" )

        self._parser.add_argument( "--wipe",
                                   action="store_true", dest="wipe", default=False,
                                   help="Wipe directory & run confgen" )

        self._parser.add_argument( "--check", "--test", "-t",
                                   action="store_true", dest="check", default=False,
                                   help="Build check target" )
        self._parser.add_argument( "--no-check", "--no-test",
                                   action="store_false", dest="check",
                                   help="Don't build check target" )

        self._parser.add_argument( "--install", "-i",
                                   action="store_true", dest="install", default=True,
                                   help="Build install target" )
        self._parser.add_argument( "--no-install",
                                   action="store_false", dest="install",
                                   help="Don't build install target" )

        self._parser.set_defaults( doxygen=False, default=True )
        class DoxygenAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                namespace.doxygen = True
                if "only" in option_string :
                    namespace.default = False
        self._parser.add_argument( "--doxygen", "--docs",
                                   action=DoxygenAction, nargs=0,
                                   help="Build doxygen target" )
        self._parser.add_argument( "--doxygen-only", "--docs-only",
                                   action=DoxygenAction, nargs=0,
                                   help="Build only doxygen target" )

        self._parser.add_argument( "--jobs", "-j",
                                   action="store", type=int, dest="jobs", default=0,
                                   help="Force number of jobs to run" )

        self._parser.add_argument( "--execute",
                                   action="store_true", dest="execute", default=True,
                                   help="Enable execution <default>" )

        self._parser.add_argument( "-n", "--no-execute",
                                   action="store_false", dest="execute",
                                   help="Disable execution (for test/debug)" )
        self._parser.add_argument( "-v", "--verbose",
                                   action="count", dest="verbose", default=0,
                                   help="Increment verbosity level" )
        self._parser.add_argument( "-q", "--quiet",
                                   action="store_true", dest="quiet", default=False,
                                   help="be vewwy quiet (I'm hunting wabbits)" )

    def _CalcMaxJobs( self ) :
        cpus = 0
        for line in open( "/proc/cpuinfo" ) :
            if line.startswith("processor") :
                cpus += 1
        return (cpus / 2) if cpus >= 2 else 1

    def _ParseArgs( self ) :
        self._args = self._parser.parse_args()
        for flag in ( "clean", "install", "check", "doxygen", "default" ) :
            self._targets.FlagEnable( flag, vars(self._args)[flag])
        if (self._args.jobs == 0) :
            self._args.jobs = self._CalcMaxJobs( )


    def _RunCommand( self, cmd ) :
        if not self._args.execute :
            print "Not running:", cmd
            return 0

        if not self._args.quiet :
            print "Running:", cmd

        status = subprocess.call( cmd )
        return status

    def _BuildTarget( self, target ) :
        cmd = [ "/usr/bin/make" ]
        cmd += target.MakeArgs(self._args.jobs)

        status = self._RunCommand( cmd )
        if status != 0 :
            sys.exit( status )

    def _BuildAll( self ) :
        for target in self._targets.Targets( lambda target:target.Enabled ) :
            self._BuildTarget( target )

    def _Wipe( self ) :
        if not self._args.force :
            ans = raw_input( "Really wipe? " )
            if not ans.startswith( ('y', 'Y') ) :
                sys.exit( 1 )
        self._RunCommand( ["rm", "-fr"] + glob.glob("*") )
        self._RunCommand( ["confgen",] )

    def Main( self ) :
        self._ParserSetup( )
        self._ParseArgs( )
        if self._args.wipe :
            self._Wipe( )
        self._BuildAll( )


main = Main()
main.Main( )
