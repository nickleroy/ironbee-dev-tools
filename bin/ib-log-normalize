#! /usr/bin/env python
# ****************************************************************************
# Licensed to Qualys, Inc. (QUALYS) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# QUALYS licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ****************************************************************************
import os
import sys
import re
import time
import argparse

from ib.util.parser import *

class TxData( object ) :
    def __init__( self, num, real, ctime, fh=None, path=None ) :
        self._num = num
        self._real = real
        self._fh = fh
        self._path = path
        self._ctime = ctime
        self._mtime = ctime

    @classmethod
    def Create( cls, num, real, _ctime, path) :
        fh = open( path, 'w' )
        return cls( num, real, _ctime, fh=fh, path=path )

    def ReOpen( self ) :
        if self._fh is None :
            self._fh = open( self._path, 'a' )

    def Touch( self, mtime ) :
        self._mtime = mtime

    def Close( self ) :
        if self._fh is not None  and  self._path is not None :
            self._fh.close( )
            self._fh = None

    Num     = property( lambda self : self._num )
    RealNum = property( lambda self : self._real )
    Handle  = property( lambda self : self._fh )
    Path    = property( lambda self : self._path )
    Ctime   = property( lambda self : self._ctime )
    Mtime   = property( lambda self : self._mtime )


class _Parser( IbBaseParser ) :
    def __init__( self, log_levels, log_level_pat ) :
        IbBaseParser.__init__( self, "IronBee Log Normalizer" )
        self._log_levels = log_levels
        self._log_level_pat = log_level_pat

        self.Parser.add_argument( "infile", type=argparse.FileType('r'),
                                  help='input file')

        self.Parser.add_argument( "outfile", type=argparse.FileType('w'), nargs='?',
                                  default=sys.stdout,
                                  help='output file')

        self.Parser.add_argument( "--tx-files",
                                  dest='txfiles', default=None,
                                  help='Store output in numbered tx files ("<f>.format(n)")' )

        self.Parser.add_argument( "--time",
                                  action="store", dest="time", default='relative',
                                  choices=('leave', 'remove', 'relative', 'relative-tx'),
                                  help="Specify how to handle time stamps" )

        self.Parser.add_argument( "--source",
                                  action="store", dest="source", default='remove-num',
                                  choices=('leave', 'remove', 'remove-num'),
                                  help="Specify how to handle source line info" )

        self.Parser.add_argument( "--pointer",
                                  action="store", dest="pointer", default='num',
                                  choices=('leave', 'zero', 'remove', 'num'),
                                  help="Specify how to handle source line info" )

        class RemapAction(argparse.Action):
            _range_re = re.compile( self._log_level_pat+r'(?:\-'+self._log_level_pat+r')?$', re.I )
            def __call__( self, parser, namespace, values, option_string=None ):
                for s in values :
                    try :
                        orig, new = s.split('=', 1)
                        new_uc = new.upper()
                        if len(new_uc)  and  new_uc not in self._log_levels :
                            parser.error( '"{:s}" is not a valid log level'.format(new) )
                        for pat in orig.split(',') :
                            m = self._range_re.match(pat)
                            if m is None :
                                parser.error( '"{:s}" is not a valid log level [1]'.format(pat) )
                            elif m.group(2) is None :
                                names = [ pat ]
                            else :
                                l1 = self._log_levels.index(m.group(1).upper())
                                l2 = self._log_levels.index(m.group(2).upper())
                                names = [ self._log_levels[i] for i in range(l1, l2)]
                            for name in names :
                                name_uc = name.upper()
                                if name_uc not in self._log_levels :
                                    parser.error(
                                        '"{:s}" is not a valid log level [2]'.format(name) )
                                else :
                                    namespace.log_remap[name_uc] = new_uc
                    except ValueError :
                        parser.error( 'Invalid remap "%s": no new name'%(s) )
        self.Parser.set_defaults( log_remap={} )
        self.Parser.add_argument( "--log-remap",
                                  action=RemapAction, nargs='+',
                                  help="Remap log levels (name[,name]=[new])" )

        self.Parser.add_argument( "--filter-rules",
                                  action="store_true", dest="filter_rules", default=False,
                                  help="Filter out verbose rule logs" )

        self.Parser.add_argument( "--skip-config",
                                  action="store_true", dest="skip_config", default=True,
                                  help="Skip configuration lines" )

class Main( object ) :
    _log_levels = (
        'EMERGENCY',
        'ALERT',
        'CRITICAL',
        'ERROR',
        'WARNING',
        'NOTICE',
        'INFO',
        'DEBUG',
        'DEBUG2',
        'DEBUG3',
        'TRACE')
    _log_level_pat = r'(' + r'|'.join(_log_levels) + r')'
    _rule_log_strings = (
        'RULE_START',
        'RULE_END',
        'TX_START',
        'TX_END',
        'REQ_HEADER'
        'RES_LINE'
        'REQ_BODY',
        'RES_HEADER'
        'RES_LINE',
        'RES_BODY',
        'AUDIT',
        'PHASE',
        'TFN',
        'ACTION',
        'EVENT',
        'TARGET',
        'TRUE', 'FALSE', 'ERROR',
        'OP',
        )

    _regexs = {
        'Time1'    : re.compile( r'((\d{4})-(\d{2})-(\d{2})T' \
                                 r'(\d{2}):(\d{2}):(\d{2})\.(\d{4,})([-\+]\d{4}))' ),
        'Time2'    : re.compile( r'((\d{4})(\d{2})(\d{2})\.(\d{2})h(\d{2})m(\d{2})s)' ),
        'PID'      : re.compile( r'\ \[(\d+)\] ' ),
        'TX'       : re.compile( r'\ \[tx:([a-f0-9\-]{36})\] ' ),
        'Ptr'      : re.compile( r'(0x[\da-fA-F]+)' ),
        'Src'      : re.compile( r' (\(\s*([\w\./]+):(\d+\s*)\))' ),
        'Level'    : re.compile( r' ((' + r'|'.join(_log_levels) + r')\s+ )-' ),
        'Rule'     : re.compile( r' \[rule:"[\w\-\.\d/]+" rev:\d+\] ' ),
        'RuleLog'  : re.compile( r'(?: ' + r'|'.join(_rule_log_strings) + r')' ),
        'PostConf' : re.compile( r'(?: \[tx:[a-f0-9\-]{36}\] |CONN EVENT)' ),
    }

    def Run( self ) :
        cont = None
        pid = None
        txs = { }
        numtx = 0
        ptrs = { }
        starttime = None
        cleantime = None
        config = True
        for n,line in enumerate(self._args.infile) :
            line = line.rstrip()
            orig = line
            linenum = n+1
            timefloat = 0.0

            if 'CONFIG Passing "' in line  and  line.count( '"' ) % 2 :
                cont = line
                continue
            elif cont is not None :
                assert line.startswith( '"' )
                line = cont + line
                linenum -= 1
                cont = None


            if config  and  self._regexs['PostConf'].search( line ) :
                config = False
            if self._args.skip_config  and  config :
                continue

            try :
                uuid = self._regexs['TX'].search( line ).group(1)
                txdata = txs.get(uuid)
            except AttributeError as e :
                uuid = None
                txdata = None

            # Fixup time stamp
            try :
                m = self._regexs['Time1'].match( line )
                if m is None :
                    m = self._regexs['Time2'].match( line )
                if m is None :
                    print >>sys.stderr, "Ignoring line ", linenum
                    continue
                timestr = m.group(1)
                tstr = "%s-%s-%s %s:%s:%s" % m.groups()[1:7]
                timeinfo = time.strptime( tstr, r'%Y-%m-%d %H:%M:%S' )
                timefloat = time.mktime( timeinfo )
                try :
                    timefloat += float('0.'+m.group(8))
                except IndexError :
                    pass
                if starttime is None :
                    starttime = timefloat
                if self._args.time == 'relative' :
                    line = line.replace(timestr, '%012.6f' % (timefloat - starttime) )
                elif self._args.time == 'relative-tx' :
                    if uuid is None :
                        txstart = starttime
                    elif txdata is None :
                        txstart = timefloat
                    else :
                        txstart = txdata.Mtime
                    line = line.replace(timestr, '%012.6f' % (timefloat - txstart) )
                elif self._args.time == 'remove' :
                    line = line.replace(timestr+' ', '')
            except AttributeError as e :
                print >>sys.stderr, "Ignoring line ", linenum
                continue

            # Filter vebose rule logging
            if self._args.filter_rules  and  self._regexs['Rule'].search( line ) :
                if not self._regexs['RuleLog'].search( line ) :
                    continue

            # Clean up old transactions
            if timefloat is not None :
                if cleantime is None :
                    cleantime = timefloat + (5 * 60)
                elif timefloat >= cleantime :
                    cleantime = timefloat + (5 * 60)
                    clean_mtime = timefloat - (60 * 60)
                    close_mtime = timefloat -  (2 * 60)
                    for uuid,txdata in txs.items( ) :
                        if txdata is not None  and  txdata.Mtime < clean_mtime :
                            txdata = None
                            txs[uuid] = None

                        if txdata is not None  and  txdata.Mtime < close_mtime :
                            txdata.Close()
                
            # Fixup log levels
            m = self._regexs['Level'].search( line )
            if m is not None :
                level = m.group(2)
                slen = len(m.group(1))
                new = self._args.log_remap.get(level)
                if new is not None :
                    while len(new) <= slen :
                        new += ' '
                    line = line.replace( level, new )

            # Fixup PID
            try :
                pidinfo  = self._regexs['PID'].search( line ).group(1)
                line = line.replace( ' ['+pidinfo+']', '' )
                if pid is None :
                    pid = pidinfo
                else :
                    assert pid == pidinfo
                line = line.replace( ' ['+pidinfo+']', '' )
            except AttributeError :
                pass

            # Fixup source
            if self._args.source != 'leave' :
                m = self._regexs['Src'].search( line )
                if m is not None :
                    old = m.group(1) if self._args.source == 'remove' else m.group(3)
                    line = line.replace( old, '' )

            # Fixup TX UUID
            if uuid is not None :
                if txdata is None :
                    if self._args.txfiles is None :
                        txdata = TxData(numtx, numtx, timefloat, fh=self._args.outfile)
                    else :
                        path = self._args.txfiles.format( numtx )
                        txdata = TxData.Create(0, numtx, timefloat, path)
                        if not self._args.quiet :
                            print "Created tx file", path, "for transaction", numtx
                    txs[uuid] = txdata
                    numtx += 1
                elif txdata.Handle is None :
                    txdata.Touch( timefloat )
                    txdata.ReOpen( )
                    if not self._args.quiet :
                        print "Re-opened tx file", txdata.Path, "for transaction", txdata.RealNum
                else :
                    txdata.Touch( timefloat )
                if txdata is not None :
                    new = '{:05d}'.format(txdata.Num)
                    line = line.replace( uuid, new )

            # Fixup pointers
            if self._args.pointer != 'leave' :
                while True :
                    m = self._regexs['Ptr'].search( line )
                    if m is None :
                        break
                    ptr = m.group(1)
                    if ptr not in ptrs :
                        ptrs[ptr] = len(ptrs)
                    if self._args.pointer == 'remove' :
                        line = line.replace( ptr, '' )
                    elif self._args.pointer == 'zero' :
                        line = line.replace( ptr, '0X0000' )
                    elif self._args.pointer == 'num' :
                        line = line.replace( ptr, 'PTR-%06x' % ptrs[ptr] )

            # Write out the modified line
            if txdata is None :
                print >>self._args.outfile, line
            else :
                print >>txdata.Handle, line
                if "TX DESTROY" in line :
                    txdata.Close( )

    def Main( self ) :
        self._parser = _Parser( self._log_levels, self._log_level_pat )
        self._args = self._parser.Parse( )
        self.Run( )

main = Main( )
main.Main( )

### Local Variables: ***
### py-indent-offset:4 ***
### python-indent:4 ***
### python-continuation-offset:4 ***
### tab-width:4  ***
### End: ***
