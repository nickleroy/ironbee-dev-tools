#! /usr/bin/env python
# ****************************************************************************
# Licensed to Qualys, Inc. (QUALYS) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# QUALYS licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ****************************************************************************
import re
import os
import sys
import time
import subprocess
import argparse
import collections
import netifaces
import socket
import copy

from ibutil import *
from ibversion import *

class ProcessError( BaseException ) : pass

def CheckIbVersion( vs1, opstr, vs2 ) :
    try:
        return IbVersionComparer.CompareVersionsStr( vs1, opstr, vs2 )
    except IbVersionException as e:
        print "Failed to compare versions:", e
        raise

class StateStackError( ProcessError ) : pass
class StateLocked( ProcessError ) : pass

class EnableState( object ) :
    def __init__( self, state, current, locked=False ) :
        self._state   = state
        self._current = current
        self._locked  = locked
    def _SetCurrent( self, current ) :
        if self._locked :
            raise StateLocked
        self._current = current
    State   = property( lambda self : self._state )
    Current = property( lambda self : self._current, _SetCurrent )
    Locked  = property( lambda self : self._locked )
    def __str__( self ) :
        return "State:%s Current:%s" % ( self.State, self.Current )


class LineState( object ) :
    __WsRe = re.compile( r'([ \t]*)' )
    def __init__( self ) :
        self._enable = True
        self._expand = True
        self._enable_state = EnableState( True, True, True )
        self._enable_stack = [ ]
        self._line_text = None
        self._lead_white = None
        self._original = None

    def LineStart( self, line, line_num ) :
        self.LineEnable = self._enable_state.Current
        self._expand = True
        self._line_num = line_num
        self._lead_white = self.__WsRe.match( line ).group(1)
        self._line_text = line.strip()
        self._original = line

    def LineEnd( self ) :
        self._line_text = None
        self._lead_white = None
        self._original = None

    def RestoreLine( self ) :
        self.SetLine( self.Original )

    def GetLineText( self ) :
        return self._line_text

    def SetLineText( self, line_text ) :
        self._line_text = line_text.strip()

    def GetLineFull( self ) :
        line = self._lead_white
        if not self.GetLineEnable() :
            line += '#'
        line += self._line_text
        return line

    def GetLineEnable( self ) :
        return self._enable

    def SetLineEnable( self, enable ) :
        assert type(enable) == bool
        tmp = self._enable
        self._enable = enable
        return tmp

    def GetEnableState( self ) :
        return self._enable_state.Current

    def SetEnableState( self, enable ) :
        assert type(enable) == bool
        self._enable_state.Current = enable

    def PushEnableState( self, enable ) :
        assert type(enable) == bool
        self._enable_stack.append( self._enable_state )
        prev = self._enable_state.Current
        self._enable_state = EnableState( enable, enable )
        return prev

    def EnableStateStack( self, index=-1 ) :
        return self._enable_stack[index].Current

    def PopEnableState( self ) :
        if len(self._enable_stack) == 0 :
            raise StateStackError
        self._enable_state = self._enable_stack.pop( )
        return self._enable_state.Current

    def GetLineExpand( self ) :
        return self._expand

    def SetLineExpand( self, expand ) :
        assert type(expand) == bool
        tmp = self._expand
        self._expand = expand
        return tmp

    def __str__( self ) :
        return "LineState: Enable=%s EnableState:%s" % \
            ( self.LineEnable, self.EnableState )

    LineEnable  = property( GetLineEnable,  SetLineEnable )
    LineExpand  = property( GetLineExpand,  SetLineExpand )
    StackSize   = property( lambda self : len(self._enable_stack) )
    LineText    = property( GetLineText, SetLineText )
    LineFull    = property( GetLineFull )
    LineNum     = property( lambda self : self._line_num )
    Original    = property( lambda self : self._original )
    LineNum     = property( lambda self : self._line_num )
    LeadWhite   = property( lambda self : self._lead_white )
    EnableStack = property( lambda self : self._enable_stack )
    EnableState = property( GetEnableState, SetEnableState )

class ExpandError( ProcessError ) : pass

class FileState( object ) :
    def __init__( self, fp_in, fp_out, defs ) :
        assert fp_in is not None
        assert defs is not None
        self._fp_in  = fp_in
        self._fp_out = fp_out
        self._defs = defs
    InFile  = property( lambda self : self._fp_in )
    InName  = property( lambda self : self._fp_in.name )
    OutFile = property( lambda self : self._fp_out )
    OutName = property( lambda self : "" if self._fp_out is None else self._fp_out.name )
    Defs    = property( lambda self : self._defs )
    BaseId  = property( lambda self : self._defs['Base'] )


class FileProcessor( object ) :
    __ExpandRe   = re.compile( r'\$\{([^\{\}]+)\}' )
    __ImportRe1  = re.compile( r'\.import\s+"(.+)"', re.I)
    __ImportRe2  = re.compile( r'\.import\s+(\S+)', re.I)
    __IncludeRe1 = re.compile( r'\.include\s+"(.+)"', re.I)
    __IncludeRe2 = re.compile( r'\.include\s+(\S+)', re.I)
    __IfStartRe1 = re.compile( r'\.if\s+"([^"]+)"', re.I )
    __IfStartRe2 = re.compile( r'\.if\s+(.*)', re.I )
    __IfElseRe   = re.compile( r'\.else', re.I )
    __IfEndRe    = re.compile( r'\.endif', re.I )
    __DefineRe1  = re.compile( r'\.define\s+(\w+)\s+(.*)', re.I)
    __DefineRe2  = re.compile( r'\.define\s+(\w+)\s+"(.*)"', re.I)
    __RuleRe     = re.compile( r'(Rule|StreamInspect) ', re.I )
    __AutoHeader = \
        '# ${OutFile} Auto-generated @${Time} by genconf ' + \
        'from ${InFile}.  DO NOT EDIT!!'

    def __init__( self, args, defs ) :
        self._args      = args
        self._main_defs = copy.copy( defs )
        self._lstate    = None
        self._fstack    = [ ]
        self._fstate    = None

    FileState   = property( lambda self : self._fstate )

    def Expand( self, text ) :
        defs = self.FileState.Defs
        for n in range(100) :
            m = self.__ExpandRe.search( text )
            if m is None :
                return text
            key = m.group(1)
            try :
                value = defs[key]
            except KeyError :
                value = ""
            try :
                text = text.replace( '${'+key+'}', str(value) )
            except TypeError :
                print type(key), key, type(value), value
                print defs.Str()
                raise
        raise ExpandError

    def CheckReList( self, line_state, re_list ) :
        for regex in re_list :
            m = regex.match( line_state.LineText )
            if self._args.verbose > 2 :
                print 'Checking "%s" against "%s" -> %s' % \
                    ( line_state.LineText, regex.pattern, m )
            if m is not None :
                return m
        return None

    def ProcessLineIf( self, line_state ) :
        # Check for .if "<expr>"
        m = self.CheckReList( line_state, (self.__IfStartRe1,self.__IfStartRe2) )
        if m is None :
            return False

        expr = self.Expand( m.group(1) )
        if expr == "" :
            expr = "False"
        try :
            v = eval(expr)
        except (BaseException) as e :
            print >>sys.stderr, 'if: Failed to eval "'+expr+'"'
            v = False
        prev = line_state.EnableState
        e = prev and v
        line_state.PushEnableState( e )
        line_state.LineEnable = False
        line_state.LineExpand = False
        if self._args.verbose >= 2 :
            print '  if("%s") => %s : enable %s -> %s' % ( expr, str(v), str(prev), str(e) )
        return True

    def ProcessLineElse( self, line_state ) :
        # Check for .else
        m = self.CheckReList( line_state, (self.__IfElseRe,) )
        if m is None :
            return False
        if not line_state.StackSize :
            print >>sys.stderr, 'Mismatched .else @ '+fp.name+':', line_state.LineNum
            print >>sys.stderr, line_state.EnableStack
            sys.exit(1)
        stackprev = line_state.EnableStateStack()
        prev = line_state.EnableState
        line_state.SetEnableState( stackprev and not prev )
        line_state.LineEnable = False
        line_state.LineExpand = False
        if self._args.verbose >= 2 :
            print "  else: enable %s -> %s" % ( str(prev), str(line_state.LineEnable) )
        return True

    def ProcessLineEndif( self, line_state ) :
        # Check for .endif
        m = self.CheckReList( line_state, (self.__IfEndRe,) )
        if m is None :
            return False
        if not line_state.StackSize :
            print >>sys.stderr, 'Mismatched .endif @ '+\
                self.FileState.InName+':', line_state.LineNum
            print >>sys.stderr, line_state.EnableStack
            sys.exit(1)
        prev = line_state.PopEnableState( )
        line_state.LineEnable = False
        line_state.LineExpand = False
        if self._args.verbose >= 2 :
            print "  endif: enable %s -> %s" % ( str(prev), str(line_state.LineEnable) )
        return True

    def ProcessLineDefine( self, line_state ) :
        # Check for a definition
        m = self.CheckReList( line_state, (self.__DefineRe1,self.__DefineRe2) )
        if m is None :
            return False
        if not line_state.LineEnable :
            return True
        expanded = self.Expand(m.group(2))
        self.FileState.Defs.Set( m.group(1), expanded )
        if self._args.verbose >= 2 :
            print '  defined "%s" to be "%s"' % ( m.group(1), expanded )
        line_state.LineExpand = False
        line_state.LineEnable = False
        return True

    def ProcessLineImport( self, line_state ) :
        # Process .Import
        m = self.CheckReList( line_state, (self.__ImportRe1,self.__ImportRe2) )
        if m is None :
            return False
        if not line_state.LineEnable :
            return True
        line_state.LineEnable = False
        name = self.Expand( m.group(1) )
        if not len(name) :
            return True
        base = os.path.dirname( self.FileState.InName )
        fpath = os.path.join( base, name )
        try :
            fp = open(fpath)
            if self._args.verbose >= 1 :
                print '  importing "'+fpath+'"'
            self.ProcessFile( fp, None, False )
        except IOError as e :
            print >>sys.stderr, 'Error reading file "'+fpath+'": ', e
            sys.exit( 1 )
        return True

    def ProcessLineInclude( self, line_state ) :
        # Process .Include
        m = self.CheckReList( line_state, (self.__IncludeRe1,self.__IncludeRe2) )
        if m is None :
            return False
        if not line_state.LineEnable :
            return True
        line_state.LineEnable = False
        name = self.Expand( m.group(1) )
        if not len(name) :
            return True
        base = os.path.dirname( self.FileState.InName )
        fpath = os.path.join( base, name )
        if self._args.verbose >= 1 :
            print '  including "'+fpath+'" into '+ \
                str(self.FileState.OutFile)+' "'+str(self.FileState.OutName)+'"'
        try :
            fp = open(fpath)
            self.ProcessFile( fp, self.FileState.OutFile, True )
        except IOError as e :
            print >>sys.stderr, 'Error reading file "'+fpath+'": ', e
            sys.exit( 1 )
        return True

    def ProcessLine( self, line_state ) :

        # Create "Line", "RID", "PRID"
        self.FileState.Defs.Set('Line', '%03d' % (line_state.LineNum) )
        ruleid = '%s/%03d' % (self.FileState.BaseId, line_state.LineNum)
        self.FileState.Defs.Set('RID', ruleid, fn = lambda d,v : d.Set('PRID', v))

        # Add genconf header line
        if line_state.LineNum == 1 :
            if re.match( r'#!\s*genconf', line_state.LineText ) :
                line_state.Line = self.__AutoHeader
            elif self._args.force_header  and  \
                    ( len(line_state.Line) <= 1 or line_state.Line.startswith('#') ):
                line_state.Line = self.__AutoHeader

        # Check for a special line
        if line_state.LineText.startswith('.') :
            if self.ProcessLineIf( line_state ) :
                pass
            elif self.ProcessLineElse( line_state ) :
                pass
            elif self.ProcessLineEndif( line_state ) :
                pass
            elif self.ProcessLineImport( line_state ) :
                pass
            elif self.ProcessLineInclude( line_state ) :
                pass
            elif self.ProcessLineDefine( line_state ) :
                pass
            else :
                print >>sys.stderr, 'Failed to parse special line @ '+\
                    self.FileState.InName+':', line_state.LineNum
                print >>sys.stderr, '"'+line_state.LineText+'"'
                assert 0

        # Process the append arg
        if len(self._args.rule_append) :
            if self.__RuleRe.match( line_state.LineText ) :
                if self.LineText.endswith('\\') :
                    start,sep,end = line_state.LineText.rpartition('\\')
                    cont = True
                    text = start + ' ' + (' '.join(self._args.rule_append)) + ' \\'
                else :
                    text = line_state.LineText + ' ' + (' '.join(self._args.rule_append))
                line_state.LineText = line

        # Apply comment patterns
        for pat in self._args.uncomment_pats :
            text = line_state.LineText
            if re.match( r'\s+#', text )  and  re.search( pat, text ) :
                text = ws + re.sub( '#\s+', '', text )
            line_state.LineText = text

        # Final line processing
        text = line_state.LineText
        orig = text
        for regex,subst in self._args.patterns.items( ) :
            text = regex.sub( subst, text )
        if orig != text :
            line_state.LineText = text

        if line_state.LineExpand :
            text = self.Expand( line_state.LineText )
            line_state.LineText = text

        return line_state.LineFull

    def InitDefs( self, fp_in, fp_out, defs ) :
        basename = os.path.basename( fp_in.name )
        if fp_out is not None :
            defs.Set('OutFile', os.path.basename(fp_out.name))
        defs.Set('InFile', basename)
        defs.Set('InFilePath', fp_in.name)
        baseid = re.sub( r'\..+', r'', basename)
        defs.Set('Base', baseid, over=True)

    def BuildState( self, fp_in, fp_out, defs ) :
        self.InitDefs( fp_in, fp_out, defs )
        return FileState( fp_in, fp_out, defs )

    def ProcessFile( self, fp_in, fp_out=None, copy_defs=True ) :
        assert fp_in is not None
        if self._args.verbose >= 1:
            print 'ProcessFile(%s, %s)' % (str(fp_in), str(fp_out))

        parent_defs = self._main_defs if self.FileState is None else self.FileState.Defs
        state_defs = copy.copy( parent_defs ) if copy_defs else parent_defs

        fstate = self.BuildState( fp_in, fp_out, state_defs )
        if self._args.verbose >= 2:
            print fstate.Defs.Str()

        self._fstack.append( self.FileState )
        self._fstate = fstate
        line_state = LineState( )

        for num,line in enumerate( self.FileState.InFile ) :
            lno = num + 1
            line_state.LineStart( line, lno )
            if self._args.verbose >= 2:
                print 'Processing line %d of file "%s" %s "%s"' % \
                    ( lno, self.FileState.InFile.name,
                      line_state.LineEnable, line_state.LineText )
            line = self.ProcessLine( line_state )
            if fp_out is not None :
                if self._args.verbose >= 3:
                    print '  => "%s"' % ( line_state.LineFull )
                print >>fp_out, line_state.LineFull
            line_state.LineEnd( )
        self._fstate = self._fstack.pop(-1)
        if not copy_defs :
            self.InitDefs( self._fstate.InFile, self._fstate.OutFile, self._fstate.Defs )
        if self._args.verbose >= 1 and self._fstate is not None:
            print 'ProcessFile: Done with(%s) now(%s, %s)' % \
                (str(fp_in), str(self.FileState.InFile), str(self.FileState.OutFile))


class Main( object ) :
    def __init__( self ) :
        self._main_defs = IbDict( )

    def SetupParser( self ) :
        self._parser = argparse.ArgumentParser(
            description="IronBee Configuration Generator",
            prog="ib-genconf" )

        self._parser.set_defaults( patterns = collections.OrderedDict() )
        class SubstAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                try :
                    x, pattern, subst, opts = values[0].split( '/' )
                    flags = 0
                    if opts == 'I' :
                        flags |= re.I
                    elif opts != "" :
                        parser.error( "Invalid regex options '"+opts+"'" )
                    compiled = re.compile( pattern, flags )
                    namespace.patterns[compiled] = subst
                except ValueError :
                    parser.error( "Invalid regex '"+values[0]+"'" )
        self._parser.add_argument( "--subst", action=SubstAction, nargs=1,
                                   help="Specify /pattern/subst/flags regexs" )

        self._parser.set_defaults( defs = [] )
        class StrAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                for s in values :
                    try :
                        name, value = s.split( '=', 1 )
                        namespace.defs.append( (name.strip(), value) )
                    except ValueError :
                        parser.error( "Invalid argument '"+s+"'" )

        self._parser.add_argument( "strings", metavar='n=v', type=str,
                                   action=StrAction, nargs='*',
                                   help="Specify name=value definitions" )

        self._parser.add_argument( "infile", type=argparse.FileType('r'),
                                   help='input file')

        self._parser.add_argument( "--out", "-o",
                                   dest="outfile", type=argparse.FileType('w'),
                                   default=sys.stdout,
                                   help='output file')

        self._parser.add_argument( "-",
                                   action="store_true", dest="noop", default=False,
                                   help='Do nothing')

        self._parser.add_argument( '--ib-path',
                                   action="store", dest="libpath",
                                   default=os.environ.get("IB_LIBDIR"),
                                   help='Lib directory to search in (default=$IB_LIBDIR) '\
                                       'or path to file to examine')

        class EnvAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                for s in values :
                    if type(s) != str :
                        break
                    namespace.env_vars.append( s )
        self._parser.add_argument( "--env", "-e",
                                   action=EnvAction, dest="env_vars", default=[], nargs='+',
                                   help='Specify list of env. variables to import')

        self._parser.add_argument( "--force-header",
                                   action="store_true", dest="force_header", default=False,
                                   help="Force insertion of genconf header")

        self._parser.add_argument( "--rule-append",
                                   action="append", dest="rule_append", default=[],
                                   help="Append string to all rule definitions")

        self._parser.add_argument( "--uncomment",
                                   action="append", dest="uncomment_pats", default=[],
                                   help="Specify pattern to uncomment" )

        self._parser.add_argument( "-n", "--no-write",
                                   action="store_false", dest="write",
                                   help="Disable file writing (for test/debug)" )

        self._parser.add_argument( "-v", "--verbose",
                                   action="count", dest="verbose", default=0,
                                   help="Increment verbosity level" )

        self._parser.add_argument( "-q", "--quiet",
                                   action="store_true", dest="quiet", default=False,
                                   help="be vewwy quiet (I'm hunting wabbits)" )

    def Parse( self ) :
        self._args = self._parser.parse_args()
        for name in self._args.env_vars :
            if name not in os.environ :
                self._parser.error( '"%s" not in environment!'%(name) )
            self._main_defs.Set( name, os.environ[name] )
        for name,value in self._args.defs :
            self._main_defs.Set( name, value )

    Execute = property( lambda self : self._args.verbose )
    Verbose = property( lambda self : self._args.verbose )
    Quiet   = property( lambda self : self._args.verbose )

    def FindIbVersion( self ) :
        if 'IB_VERSION' in self._main_defs is not None  and  self._args.libpath is None :
            print >>sys.stderr, 'Warning: No IronBee version available'
        path = IbVersionReader.FindFile( self._args.libpath )
        if path is None :
            print >>sys.stderr, \
                'Warning: Unable to find library file in "'+self._args.libpath+'"'
        vreader = IbVersionReader( )
        version = vreader.GetAutoVersion( path )
        if version is None :
            print >>sys.stderr, 'Warning: Unable to parse version in "'+str(path)+'"'
            return
        self._main_defs['IB_VERSION'] = version.Format()

    def SetupDefs( self ) :
        pid = ""
        for name in netifaces.interfaces() :
            try :
                ip = netifaces.ifaddresses(name)[netifaces.AF_INET][0]['addr']
                self._main_defs.Set("iface:"+name, ip, over=False)
                if ip.startswith("192.168") :
                    self._main_defs.Set("iface:private", ip, over=False)
                elif name.startswith("eth") :
                    self._main_defs.Set("iface:public", ip, over=False)
                if name.startswith("eth") :
                    self._main_defs.Set("iface:eth", ip, over=False)
            except KeyError :
                continue
        self._main_defs.Set("HostName", socket.gethostname(), over=False)
        self._main_defs.Set("Time", time.asctime(), over=False)
        self.FindIbVersion( )

    def ProcessFile( self ) :
        if not self._args.quiet :
            print "Generating", self._args.outfile.name, "from", self._args.infile.name
        processor = FileProcessor( self._args, self._main_defs )
        processor.ProcessFile( self._args.infile,
                               self._args.outfile if self._args.write else None,
                               True)
        
    def Main( self ) :
        self.SetupParser( )
        self.Parse( )
        self.SetupDefs( )
        self.ProcessFile( )

main = Main( )
main.Main( )

### Local Variables: ***
### py-indent-offset:4 ***
### python-indent:4 ***
### python-continuation-offset:4 ***
### tab-width:4  ***
### End: ***
