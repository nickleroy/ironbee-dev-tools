#! /usr/bin/env python
# ****************************************************************************
# Licensed to Qualys, Inc. (QUALYS) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# QUALYS licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ****************************************************************************
import re
import os
import sys
import shutil
import subprocess
import argparse
import time
import glob
import shlex
import tarfile
import tempfile
import git
import functools

from ib.util.version        import *
from ib.util.version_reader import *
from ib.build.exceptions    import *
from ib.build.archive       import *
from ib.build.config        import *
from ib.build.parser        import *

class DetectionError(BaseException) : pass

class _Parser( IbBuildParser ) :
    def __init__( self ) :
        IbBuildParser.__init__( self, "Program to create a build archive for VMs" )

        self.Parser.add_argument( "--ib-version",
                                  action="store", dest="ib_version", default=None,
                                  help="Specify IronBee version to use <auto>" )

        self.Parser.add_argument( "--ib-branch",
                                  action="store", dest="ib_branch", default=None,
                                  help="Specify alternate IronBee git branch name <auto>" )

        self.Parser.add_argument( "--etc-branch",
                                  action="store", dest="etc_branch", default=None,
                                  help="Specify alternate etc.in git branch name <auto>" )

        self.Parser.add_argument( "--gcc-version",
                                  action="store", dest="gcc_version", default=None,
                                  help="Specify GCC version to use <auto>" )

        self.Parser.add_argument( "--clang-version",
                                  action="store", dest="clang_version", default=None,
                                  help="Specify and use LLVM-clang version to use <auto>" )

        self.Parser.add_argument( "--ats-version",
                                  action="store", dest="ats_version", default=None,
                                  help="Specify ATS version to use <auto>" )

        self.Parser.add_argument( "--ib-build-dir",
                                  action="store", dest="ib_build", default='.',
                                  help="Specify IronBee build directory <.>" )

        host = os.environ.get( 'IF_NET_FULL', os.environ.get('HOSTNAME') )
        self.Parser.add_argument( "--host", default=host,
                                  help='Specify build host name "{}"'.format(host) )

        self.Parser.add_argument( "--build",
                                  action="store", dest="build", default=False,
                                  help="Create build archive" )

        self.Parser.set_defaults( clean_tmp=True )
        self.Parser.add_argument( "--clean-tmp",
                                  action="store_true", dest="clean_tmp",
                                  help="Cleanup temporary directory(s) (default=yes)" )
        self.Parser.add_argument( "--no-clean-tmp",
                                  action="store_false", dest="clean_tmp",
                                  help="Don't cleanup temporary directory(s)" )

        self.Parser.set_defaults( clean=False )
        self.Parser.add_argument( "--clean", "-c",
                                  action="store_true", dest="clean",
                                  help="Cleanup old archives <default=no>" )
        self.Parser.add_argument( "--no-clean",
                                  action="store_false", dest="clean",
                                  help="Disable cleanup of old archives" )


class ConfigItem( object ) :
    def __init__( self, name, regex, setter ) :
        self._name  = name
        self._regex = regex
        self._setfn = setter
        self._value = None
    def __nonzero__( self ) :
        return self._value is not None
    def SetValueRaw( self, v ) :
        self._value = v
    def SetValue( self, data, v ) :
        if self._setfn is None :
            self.SetValueRaw( v )
        else :
            self._setfn( data, self, v )
    Name    = property( lambda self : self._name )
    Pattern = property( lambda self : self._pattern )
    RegEx   = property( lambda self : self._regex )
    Value   = property( lambda self : self._value )


class ConfigData( object ) :
    __item_defs = None

    @classmethod
    def _InitClass( cls ) :
        if cls.__item_defs is not None :
            return
        cls.__item_defs = {
            'ConfigLine' : ( re.compile(r'\s*\$\s+(.*?configure.*)'), cls._SetConfigLine ),
            'CFlags'     : ( re.compile(r'CFLAGS=\'(.*)\''),   None ),
            'CxxFlags'   : ( re.compile(r'CXXFLAGS=\'(.*)\''), None ),
            'ConfigPath' : ( None, None ),
        }

    def __init__( self ) :
        self._InitClass( )
        self._items = { }
        for i,v in self.__item_defs.items() :
            self._items[i] = ConfigItem( i, *v )

    def ReadConfigFile( self, fp ) :
        for line in fp :
            for item in self._items.values() :
                if item.Value is not None  or  item.RegEx is None :
                    continue
                m = item.RegEx.match( line )
                if m is not None :
                    print 'Setting "{}" to "{}"'.format(item.Name, m.group(1))
                    item.SetValue( self, m.group(1) )
                    if all( [v.Value is not None for v in self._items.values()] ) :
                        return True
        return False

    def _SetConfigLine( self, item, value ) :
        split = shlex.split( value )
        item.SetValueRaw( split )
        self._items['ConfigPath'].SetValueRaw( split[0] )

    def __str__( self ) :
        for i,v in self._items.items() :
            print i, v.Value
        return 'Config Data {' + str(['{}="{}"'.format(i,str(v.Value)) for i,v in self._items.items()])+'}'
            
    ConfigLine = property( lambda self : self._items['ConfigLine'] )
    ConfigPath = property( lambda self : self._items['ConfigPath'] )
    CFlags     = property( lambda self : self._items['CFlags'] )
    CxxFlags   = property( lambda self : self._items['CxxFlags'] )


class _Main( object ) :
    def __init__( self ) :
        self._parser = _Parser( )

    def _ParseCmdline( self ) :
        self._args = self._parser.Parse()
        if self._args.timestamp is None :
            self._args.timestamp = time.time()

    def _ReadConfig( self ) :
        config = IbBuildConfig( self._args.config )
        self._config = config.Read( )

    def _ShowArchiveDir( self ) :
        print "Archive directory:", self._archive_dir
        if self.Execute :
            cmd = ( '/usr/bin/ls', '-lh', self._archive_dir )
            subprocess.call( cmd )

    def _ListArchives( self ) :
        cmd = ( '/usr/bin/ls', '-lh', self._archive_dir )
        subprocess.call( cmd )

    def _CleanArchives( self, verstring ) :
        timestamps = []
        archives = []
        for archive in glob.glob(self._ArchivePath('*', verstring, '*')) :
            m = regex.search( archive )
            assert m is not None
            if m.group(1) != self._args.timestamp :
                timestamps.append( m.group(1) )
        for timestamp in timestamps :
            for archive in glob.glob(self._ArchivePath('*', None, timestamp)) :
                archives.append(archive)
        if self.Verbose and len(archives):
            print "Cleaning archives:", archives
        if self.Execute :
            for archive in archives :
                os.remove( archive )

    def _DetectGccVersion( self ) :
        if self._args.gcc_version is not None :
            return self._args.gcc_version
        elif 'GCC_VERSION' in os.environ :
            return os.environ['GCC_VERSION']
        cmd = ( 'gcc', '--version' )
        output = subprocess.check_output( cmd )
        try :
            match = re.search( r' (\d+\.\d+)\.\d+', output )
            if match is None :
                raise DetectionError("Unable to detect gcc version!")
            return match.group(1)
        except OSError as e :
            raise DetectionError("Unable to detect gcc version:"+str(e))

    def _DetectClangVersion( self ) :
        if self._args.clang_version is not None :
            return self._args.clang_version
        elif 'CLANG_VERSION' in os.environ :
            return os.environ['CLANG_VERSION']
        cmd = ( 'clang', '--version' )
        output = subprocess.check_output( cmd )
        try :
            match = re.search( r' (\d+\.\d+)\.\d+', output )
            if match is None :
                raise DetectionError("Unable to detect clang version!")
            return match.group(1)
        except OSError as e :
            raise DetectionError("Unable to detect clang version:"+str(e))

    def _DetectAtsVersion( self ) :
        if self._args.ats_version is not None :
            return self._args.ats_version
        elif 'ATS_VERSION' in os.environ :
            return os.environ['ATS_VERSION']
        else :
            raise DetectionError("Unable to detect ATS version!")

    def _DetectIronBeeVersion( self ) :
        if self._args.ib_version is None :
            libdir = os.environ['IB_LIBDIR']
            path = IbVersionReader.FindFile( libdir )
            if path is None :
                raise DetectionError('Unable to find library file in "'+libdir+'"')
            vreader = IbVersionReader( )
            return vreader.GetAutoVersion( path )
        else :
            return IbVersion( self._args.ib_version )

    def _ReadBuildConfig( self ) :
        config = ConfigData( )
        with open(os.path.join(self._args.ib_build,'config.log')) as fp :
            if not config.ReadConfigFile( fp ) :
                config = None
        return config

    def _DetectGitBranch( self, args_branch, repo_path ) :
        if args_branch is not None :
            return (args_branch, None)
        else :
            repo = git.Repo( repo_path )
            return (repo.active_branch.name, repo.commit().hexsha)

    def _DetectStuff( self ) :
        try :
            labels = set()
            self._vm = IbBuildArchive( )
            self._vm.Architecture = self._args.arch
            self._vm.Bits = self._args.bits
            self._vm.GccVersion = self._DetectGccVersion( )
            self._vm.ClangVersion = self._DetectClangVersion( )
            self._vm.ClangThreadSanitizer = os.environ.get('CLANG_TSAN','False') == 'True'
            self._vm.Compiler = os.environ.get('COMPILER', 'gcc')
            labels.add( self._vm.Compiler )
            if self._vm.Compiler == 'gcc' :
                labels.add( 'gcc-'+str(self._vm.GccVersion) )
            self._vm.AtsVersion = self._DetectAtsVersion( )
            labels.add( 'ats-'+str(self._vm.AtsVersion) )
            self._vm.IronBeeVersion = self._DetectIronBeeVersion( )
            labels.add( str(self._vm.IronBeeVersion) )
            conf = self._ReadBuildConfig( )
            if conf is not None :
                self._ib_root = os.path.dirname(conf.ConfigPath.Value)
                self._vm.BuildConfig = conf.ConfigLine.Value
                self._vm.CFlags = '"'+conf.CFlags.Value+'"'
                for flag in shlex.split(conf.CFlags.Value) :
                    labels.add('CFlag'+flag)
                self._vm.CxxFlags = '"'+conf.CxxFlags.Value+'"'
                for flag in shlex.split(conf.CxxFlags.Value) :
                    labels.add('CxxFlag'+flag)
            else :
                self._ib_root = os.environ['IB_ROOT']
            (self._vm.IronBeeGitBranch, self._vm.IronBeeGitCommit) = \
                self._DetectGitBranch( self._args.ib_branch, self._ib_root)
            labels.add(self._vm.IronBeeGitBranch)
            (self._vm.EtcInGitBranch, self._vm.EtcInGitCommit) = \
                self._DetectGitBranch( self._args.etc_branch, os.environ['QLYS_ETC_IN'] )
            self._vm.EtcInGitRepo = os.environ['QLYS_ETC_IN']
            self._vm.QualysLocal = os.environ['QLYS_LOCAL']
            self._vm.TimeStamp = self._args.timestamp
            self._vm.BuildHost = self._args.host
            self._vm.Name = self._vm.TimeString
            archdir = os.path.join( self._args.archives, self._vm.TimeString )
            self._vm.ArchiveDirectory = archdir
            self._archive_dir = archdir
            self._vm.Labels = tuple(labels)
            self._ts_name = 'trafficserver-'+self._vm.AtsVersion
            if not self.Quiet :
                print 'Archives will be stored in "{}"'.format(self._archive_dir)
        except DetectionError as e:
            print >>sys.stderr, "Auto detection failed: ", e
            sys.exit(1)

    def _ArchiveFilter( self, patterns, tinfo ) :
        """
        Generic filter function for tarball archive creation using the tarball
        module.  This function takes a pointer to self, and a list / tuple of
        patterns, and a tarfile.TarInfo object.  The pattern list should
        should be a tuple/list with 2 elements: True/False, and a compiled re.
        When a path matches the pattern, the original tinfo will be returned
        if tf is True, otherwise None will be returned.  If, after exhausting
        all patterns, no match has been found, the original tinfo is returned.
        """
        for tf, regex in patterns :
            if regex.search( tinfo.name ) :
                if tf and self.Verbose :
                    print tinfo.name
                return tinfo if tf else None
        if self.Verbose >= 2 :
            print tinfo.name
        return tinfo

    def _CopyIgnore( self, patterns, basedir, names ) :
        """
        Generic filter function for filtering file name/paths based on patterns,
        matching the optional ignore parameter to shutil.copytree().  This
        function takes a pointer to self, and a list / tuple of patterns, a
        base directory, and a list of entries.  The pattern list should should
        be a tuple/list with 2 elements: True/False, and a compiled re.  When
        a path matches the pattern, the entry will be added to the ignore list
        if tf is True, otherwise it is excluded from the ignore list.  If,
        after exhausting all patterns, no match has been found, the entry is
        not added to the ignore list.  After completion, the final list of
        ignored names is returned.
        """
        ignore_list = []
        for name in names :
            path = os.path.join(basedir, name)
            ignore = None
            for (tf, regex) in patterns :
                if regex.search(path) :
                    ignore = tf
                    if self.Verbose >= 3 :
                        print path+':', ignore, regex.pattern
                    elif not ignore and self.Verbose >= 2 :
                        print path
                    break
            if ignore is True :
                ignore_list.append(name)
        return ignore_list

    def _CreateLocalArchive( self, tmproot ) :
        if self._vm.Compiler == 'gcc' :
            compiler = 'gcc-'+self._vm.GccVersion
        elif self._vm.Compiler == 'clang' :
            compiler = 'clang-'+self._vm.ClangVersion
        else :
            assert False, 'Unknown compiler "{}"'.format(self._vm.Compiler)
        ignore_ats = self._ts_name.replace('.', '\.')
        ignore_rules = (
            # ignore?, pattern ..  First match wins
            (True,  re.compile(r'.*\.sock')),
            (True,  re.compile(r'tmp/.*')),
            (False, re.compile(compiler)),
            (True,  re.compile(r'gcc-*')),
            (True,  re.compile(r'clang-*')),
            (True,  re.compile(r'opt/'+ignore_ats+'/(etc|var|tmp)/*')),
            (False, re.compile(r'opt/'+ignore_ats+'/(bin|include|lib|share)')),
            (False, re.compile(r'opt/'+ignore_ats+'/?$')),
            (False, re.compile(r'opt/'+ignore_ats+'$')),
            (True,  re.compile(r'opt/(var|tmp|etc)/*')),
            (False, re.compile(r'opt/(var|tmp|etc)')),
            (True,  re.compile(r'opt/.*')),
            (True,  re.compile(r'etc/trafficserver/.*')),
            (True,  re.compile(r'etc/ironbee/.*')),
            (True,  re.compile(r'nginx')),
            (True,  re.compile(r'\.(log|blog|git|lock|meta|db|release)')),
            (True,  re.compile(r'log/(httpd|trafficserver/.*)')),
            (True,  re.compile(r'data')),
            (True,  re.compile(r'/core')),
            (True,  re.compile(r'ats.valgrind.*')),
            (True,  re.compile(r'crashes')),
        )

        tmpdir = os.path.join(tmproot, 'local')
        local = os.environ['QLYS_LOCAL']
        print 'Populating tmp local tree "'+tmpdir+'" from "'+local+'" ...'
        if self.Execute :
            shutil.copytree( local, tmpdir,
                             ignore=functools.partial(self._CopyIgnore, ignore_rules) )
            dirs = (
                (compiler,),
                ('var', 'run'),
                ('var', 'log', 'trafficserver'),
                ('var', 'log', 'trafficserver'),
                ('var', 'trafficserver', 'log'),
                ('tmp',),
                ('bin',),
                ('share',),
            )
            for d in dirs :
                full = os.path.join(tmpdir, *d)
                if not os.path.exists( full ) :
                    os.makedirs( full )
            symlinks = ( 'etc', 'var', 'tmp' )
            for name in symlinks :
                os.symlink( os.path.join('../..', name),
                            os.path.join(tmpdir, 'opt', self._ts_name, name) )

        tpath = os.path.join(self._archive_dir, 'local.tar.bz2')
        if not self.Quiet :
            print 'Creating local tarball', tpath
        if self.Execute :
            tball = tarfile.TarFile.open( tpath, 'w:bz2' )
            os.chdir( tmpdir )
            for d in ( compiler, 'bin', 'opt', 'share', 'tmp', 'var' ) :
                tball.add( d, filter=functools.partial(self._ArchiveFilter, []) )
            tball.close( )
            self._vm.AddArchive( 'local', 'local.tar.bz2', local )

    def _CreateSummary( self ) :
        if self.Execute :
            self._vm.WriteArchiveData( self._archive_dir )
        else :
            self._vm.PrintSummary( )

    def _CreateArchives( self ) :
        self._archives = [ ]
        if self.Execute :
            os.makedirs( self._archive_dir )
        tmpdir = tempfile.mkdtemp( dir=os.environ['QLYS_TMP'] )
        self._CreateLocalArchive( tmpdir )
        self._CreateSummary( )
        if self.Execute and self._args.clean_tmp :
            shutil.rmtree( tmpdir )
        elif self.Execute :
            print 'Temporary directory "{}" not removed'.format(tmpdir)

    Execute = property( lambda self : self._args.execute )
    Verbose = property( lambda self : self._args.verbose )
    Quiet   = property( lambda self : self._args.quiet )

    def Main( self ) :
        self._ParseCmdline( )
        if self._args.list :
            self._ListArchives( )
            sys.exit( 0 )
        self._DetectStuff( )
        self._CreateArchives( )
        if self._args.clean :
            self._CleanArchives( verstring )
        if not self.Quiet :
            self._ShowArchiveDir( )

main = _Main( )
main.Main( )

### Local Variables: ***
### py-indent-offset:4 ***
### python-indent:4 ***
### python-continuation-offset:4 ***
### tab-width:4  ***
### End: ***
