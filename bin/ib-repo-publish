#! /usr/bin/env python
# ****************************************************************************
# Licensed to Qualys, Inc. (QUALYS) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# QUALYS licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ****************************************************************************
import re
import os
import sys
import time
import subprocess
from ib.util.parser import *


class Parser( IbBaseParser ) :
    def __init__( self, main ) :
        IbBaseParser.__init__( self, "Perform {}".format(main.Description),
                               formatter_class=argparse.RawDescriptionHelpFormatter,
                               epilog=\
'''
Examples:
   ib-repo-publish ./dev03/ /var/tmp/nleroy/waf-sensor-1.1.x-15/
   ib-repo-publish /var/www/html/repo/dev03/ /var/tmp/nleroy/waf-sensor-1.1.x-16/
'''
 )

        self.Parser.add_argument( dest='destroot', help='Destination root' )
        self.Parser.add_argument( dest='files', default=[], nargs='+',
                                  help="Specify list of files" )

class Main( object ) :
    def __init__( self ) :
        self._parser = Parser( self )

    def _Setup( self ) :
        pass

    def _Parse( self ) :
        self._args = self._parser.Parse()

    def _GetFiles( self, names ) :
        files = []
        for name in names :
            if os.path.isdir( name ) :
                files += self._GetFiles( [os.path.join(name, f) for f in os.listdir(name) ] )
            elif os.path.isfile( name ) :
                files += [ name ]
            else :
                assert False, '"'+name+'" does not exist'
        return files

    def _Publish( self, root, repo, name ) :
        dpath = os.path.join( root, repo, 'RPMS/x86_64', os.path.basename(name) )

        if os.path.exists( dpath ) :
            if os.path.samefile( name, dpath ) :
                return 0
            if self._args.verbose > 1 :
                print 'Removing "{}"'.format(dpath)
            if self._args.execute :
                os.remove( dpath )
        if self._args.verbose > 1 :
            print 'Linking "{}" to "{}"'.format(name, dpath)
        if self._args.execute :
            os.link( name, dpath )
        return 1

    def _Update( self, root, repo ) :
        f = os.path.join( root, repo, 'create_repo_metadata.sh' )
        cmd = [ f ]
        if self._args.verbose :
            print 'Executing "{}"'.format(f)
        if self._args.execute :
            subprocess.call( cmd )
        

    def _Run( self, root, files ) :
        qregex = re.compile( r'(ironbee|rns|waf)' )
        published = { 'sensor' : 0, 'qualys' : 0 }
        for f in files :
            name = os.path.basename( f )
            repos = [ 'sensor' ]
            if qregex.match( name ):
                repos += ['qualys']
            if self._args.verbose == 1 :
                print 'Publishing "{}" to {}'.format( name, repos )
            for repo in repos :
                published[repo] += self._Publish( root, repo, f )

        for repo,count in published.items() :
            if count :
                self._Update( root, repo )

    def Main( self ) :
        self._Setup( )
        self._Parse( )
        files = self._GetFiles( self._args.files )
        self._Run( self._args.destroot, files )
        if not self._args.quiet :
            print 'Finished @ {}'.format(time.asctime())

    Description = property( lambda self : 'Publish files to YUM repository' )


main = Main( )
main.Main( )

### Local Variables: ***
### py-indent-offset:4 ***
### python-indent:4 ***
### python-continuation-offset:4 ***
### tab-width:4  ***
### End: ***
