#! /usr/bin/env python
# ****************************************************************************
# Licensed to Qualys, Inc. (QUALYS) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# QUALYS licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ****************************************************************************
import os
import sys
import argparse
from ib.util.version import *
from ib.util.version_reader import *

class Main( object ) :
    def __init__( self ) :
        self._parser = argparse.ArgumentParser( description="IronBee Version Detector",
                                                prog="ib-version" )

    def Setup( self ) :
        self._parser.add_argument( 'path',
                                   nargs='?', default=os.environ.get("IB_LIBDIR"),
                                   help='Lib directory to search in (default=$IB_LIBDIR) '\
                                       'or path to file to examine')

        default_format = r'%{1}.%{2}.%{3}'
        self._parser.add_argument( '--format',
                                   dest='format',
                                   default=default_format,
                                   help='Specify printf-style format '\
                                       'using %%[n] and %%{n} for element n. '\
                                       'The %%{n} version will terminate the string if element n '\
                                       'is past the end of the version information. '\
                                       'Default: "'+default_format.replace("%","%%")+'"' )

        self._parser.set_defaults( vercmp=None )
        class CompareAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                vercmp = IbVersionCmp( values[0], values[1] )
                if vercmp is None :
                    parser.error( 'Invalid operator or version passed to '+option_string )
                namespace.vercmp = vercmp
        self._parser.add_argument( '--compare', '-c',
                                   action=CompareAction, nargs=2,
                                   help='Specify comparison operation [==,!=,<,<=,>,>=] and version' )

        self._parser.add_argument( "-v", "--verbose",
                                   action="count", dest="verbose", default=0,
                                   help="Increment verbosity level" )

        self._parser.add_argument( "-q", "--quiet",
                                   action="store_true", dest="quiet", default=False,
                                   help="be vewwy quiet (I'm hunting wabbits)" )

    def Parse( self ) :
        self._args = self._parser.parse_args()

    Execute = property( lambda self : self._args.verbose )
    Verbose = property( lambda self : self._args.verbose )
    Quiet   = property( lambda self : self._args.verbose )

    def FindFile( self ) :
        tmp = IbVersionReader.FindFile( self._args.path )
        if tmp is None :
            self._parser.error( 'Unable to find library file in "'+self._args.path+'"' )
        self._args.path = tmp

    def Run( self ) :
        self.FindFile( )
        vreader = IbVersionReader( )
        version = vreader.GetAutoVersion( self._args.path )
        if version is None :
            sys.exit(1)
        if self._args.vercmp is not None :
            result = self._args.vercmp.Compare( version )
            print str(result)
        else :
            print version.Format( self._args.format )

    def Main( self ) :
        self.Setup( )
        self.Parse( )
        self.Run( )

main = Main( )
main.Main( )

### Local Variables: ***
### py-indent-offset:4 ***
### python-indent:4 ***
### python-continuation-offset:4 ***
### tab-width:4  ***
### End: ***
