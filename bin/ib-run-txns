#! /usr/bin/env python
# ****************************************************************************
# Licensed to Qualys, Inc. (QUALYS) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# QUALYS licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ****************************************************************************
import os
import sys
import threading
import urllib2
import httplib
import time
import logging
import string
import random
import socket
import signal

from ib.util.parser import *


class _Parser( IbBaseParser ) :
    def __init__( self ) :
        IbBaseParser.__init__( self,
                               "Program to generate lots of transactions",
                               formatter_class=argparse.RawDescriptionHelpFormatter,
                               epilog=\
'''
Examples:
   ib-run-txns -v http://my.site.com:80 /get.html /post.html 1k 10m 20 20
'''
        )

        #self.Parser.add_argument( "base_url", action=self.MakeUrlAction('base_url'), help='Base URL' )
        self.Parser.add_argument( "base_url", help='Base URL' )
        self.Parser.add_argument( "get_path", help='GET path')
        self.Parser.add_argument( "post_path", help='POST path')
        self.Parser.add_argument( "post_size", action=self.MakeSizeAction('post_size'), help='POST data size' )
        self.Parser.add_argument( "duration", action=self.MakeTimeAction('duration'), help='Test duration')
        self.Parser.add_argument( "threads", type=int, help='Number of worker threads' )
        self.Parser.add_argument( "actions", type=int, help='Number of GET+POST actions / connection' )


class _Worker( object ) :
    def __init__( self, args, start_event, num ) :
        self._args = args
        self._start = start_event
        chars = string.ascii_letters + string.digits
        self._post_buffer = ''.join( [random.choice(chars) for n in range(self._args.post_size)] )
        self._tps = 0
        self._transactions = 0
        self._thread = threading.Thread( name='Thread-{:03d}'.format(num), target=self.Run )
        self._thread.start( )
        self._name = threading.currentThread().getName()

    def _Get( self, conn ) :
        conn.request("GET", 'http://'+self._args.base_url+self._args.get_path, headers={"Connection":" keep-alive"})
        result = conn.getresponse()
        result.read()

    def _Post( self, conn ) :
        if self._args.post_path != '' :
            conn.request("POST", 'http://'+self._args.post_path, self._post_buffer, headers={"Connection":" keep-alive"})
            result = conn.getresponse()
            result.read()

    def Stop( self ) :
        self._stop = True

    def Run( self ):
        self._stop = False
        self._start.wait( )
        start = time.time()
        logging.debug( '{} starting @ {}'.format(threading.currentThread().getName(), start) )
        count = 0
        while not self._stop :
            try :
                conn = httplib.HTTPConnection( self._args.base_url )
                for n in range( self._args.actions ) :
                    if self._stop :
                        break
                    self._Get( conn )
                    count += 1
                    self._Post( conn )
                    count += 1
                conn.close()
            except (httplib.HTTPException,socket.error) as e :
                logging.exception( '{}: {}'.format(self._name, e) )
        done = time.time()
        actual = done - start
        self._tps = (count / actual)
        self._transactions = count
        logging.debug( '{}: {} transactions in {:7.4f}s = {}tps' \
                       .format(threading.currentThread().getName(), count, actual, (count / actual)) )

    TPS = property( lambda self : self._tps )
    Thread = property( lambda self : self._thread )
    Transactions = property( lambda self : self._transactions )


class _Main( object ) :
    def __init__( self ) :
        self._parser = _Parser( )

    def _ParseCmdLine( self ) :
        self._args = self._parser.Parse( )

    def _FormatNum( self, value ) :
        if self._args.units == 'GMK' :
            if value > 1.1e9 :
                return '{:8.3f}Gb'.format(value/1.0e9)
            elif value > 1.1e6 :
                return '{:8.3f}Mb'.format(value/1.0e6)
            elif value > 1.1e3 :
                return '{:8.3f}Kb'.format(value/1.0e3)
            else :
                return '{:8.3f}b'.format(value)
        else :
            if value > 1.1 * 1024*1024*1024 :
                return '{:8.3f}gb'.format(value/(1024*1024*1024))
            elif value > 1.1e6 :
                return '{:8.3f}mb'.format(value/(1024*1024))
            elif value > 1.1e3 :
                return '{:8.3f}kb'.format(value/1024)
            else :
                return '{:8.3f}b'.format(value)

    def _Shutdown( self ) :
        logging.info( 'Shutting down all threads' )
        for worker in self._workers :
            worker.Stop()
        self._stop_event.set()

    def _HandleTerm(self, signum, frame) :
        logging.info( 'Handling signal {}'.format(signum) )
        self._Shutdown()

    def _Main( self ) :
        self._ParseCmdLine( )
        logging.basicConfig(level=logging.INFO,
                            format='[%(levelname)s] (%(threadName)-10s) %(message)s',
                        )

        start_event = threading.Event()
        self._stop_event = threading.Event()
        self._workers = []
        for n in range(self._args.threads) :
            self._workers.append( _Worker(self._args, start_event, n) )
        logging.info( 'Starting {} workers @ {}'.format(self._args.threads, time.asctime()) )
        timer = threading.Timer(self._args.duration, self._Shutdown)
        timer.start()
        start = time.time()
        start_event.set()

        # Install signal handler
        signal.signal(signal.SIGTERM, self._HandleTerm)
        signal.signal(signal.SIGQUIT, self._HandleTerm)
        signal.signal(signal.SIGINT,  self._HandleTerm)

        # Wait for shutdown
        while not self._stop_event.wait( 0.1 ) :
            pass

        # Wait for them all to stop
        [worker.Thread.join() for worker in self._workers]
        timer.cancel()

        # Calculate TPS
        finished = time.time()
        elapsed = finished - start
        transactions = sum( [w.Transactions for w in self._workers] )
        tps = transactions / elapsed
        logging.info( 'All workers finished in {}s Total={} TPS={}'.format(elapsed, transactions, tps) )

if __name__ == "__main__" :
    main = _Main( )
    main._Main( )

### Local Variables: ***
### py-indent-offset:4 ***
### python-indent:4 ***
### python-continuation-offset:4 ***
### tab-width:4  ***
### End: ***
