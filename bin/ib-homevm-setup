#! /usr/bin/env python
###########################################################################
##
## Copyright(c) 2014 by Nick LeRoy, 310 Jones Ave, Fort Atkinson, WI
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
###########################################################################
import re
import os
import sys
import pwd
import grp
import glob
import subprocess
import argparse
import time
import shutil
import tarfile
import stat

try :
    import ib.util
except ImportError :
    path = os.path.realpath(os.path.dirname(__file__))
    libpath = os.path.abspath(os.path.join(path,'../lib/python'))
    sys.path.append( libpath )

from ib.util.parser import *

class _Parser( IbBaseParser ) :
    def __init__( self ) :
        IbBaseParser.__init__( self, 
                               "Program to setup IronBee on a VM host" )

        self.Parser.add_argument( "user", help='Specify user to setup' )
        self.Parser.add_argument( "group", default=None, nargs='?',
                                  help='Specify group to setup' )

        self.Parser.add_argument( "--yast",
                                  dest="yast", default=False, action="store_true",
                                  help='Run yast2 to complete system configuration' )

class User( object ) :
    def __init__( self, user_name, group=None ) :
        self._user_name = user_name
        pwent = pwd.getpwnam(user_name)
        assert pwent is not None
        self._home  = pwent.pw_dir
        self._uid   = pwent.pw_uid
        self._setGroup( group, pwent.pw_gid )

    def _setGroup( self, group, gid=None ) :
        assert group is not None  or  gid is not None
        if gid is None :
            gwent = grp.getgrnam(group)
        else :
            gwent = grp.getgrgid(gid)
        assert gwent is not None
        self._gid        = gwent.gr_gid
        self._group_name = gwent.gr_name

    Group = property( lambda self : self._group, _setGroup )

    def Chown( self, path ) :
        os.chown( path, self.Uid, self.Gid )

    def ChownDirs( self, paths ) :
        cmd = [ "/bin/chown", "-R", ':'.join((self._user_name, self._group_name)) ]
        cmd += list(paths)
        print "Executing", cmd
        subprocess.call( cmd )

    def ChownDir( self, path ) :
        self.ChownDirs( (path,) )

    def SetupHomeDir( self ) :
        if not os.path.exists( self.Home ) :
            os.makedirs( self.Home )

    def Finished( self ) :
        self.ChownDir( None, self._home )

    Name  = property( lambda self : self._user_name )
    Uid   = property( lambda self : self._uid )
    Group = property( lambda self : self._group_name )
    Gid   = property( lambda self : self._gid )
    Home  = property( lambda self : self._home )
                

class _Main( object ) :
    def __init__( self ) :
        self._parser = _Parser( )

    def _ParseCmdLine( self ) :
        self._args = self._parser.Parse( )
        self._user = User( self._args.user, self._args.group )

    def _SearchFile( self, path, string ) :
        try :
            fp = open( path )
            for line in fp :
                if string in line :
                    return line
            else :
                return None
        except IOError :
            return None

    def _AppendFile( self, path, string ) :
        try :
            fp = open( path, "a" )
            print >>fp, string
            fp.close( )
        except IOError as e :
            print "Failed to append to file", path, ":", e

    def _Execute( self, cmd ) :
        if self.Verbose :
            print "Running:", cmd
        if self.Execute :
            subprocess.call( cmd )

    def _RunYast( self ) :
        if self._args.yast :
            self._Execute( ('yast2', 'ntp-client') )
            self._Execute( ('yast2', 'nis-client') )
        
    def _SetupSwap( self ) :
        if self._SearchFile( "/proc/mounts", "/swap" ) :
            cmd = ( "/bin/umount", "/swap" )
            if self.Verbose : print cmd
            subprocess.call( cmd )
        if os.path.exists( '/swap' ) :
            os.rmdir( '/swap' )
        line = self._SearchFile( '/etc/fstab', '/swap' )
        if line is None :
            return
        cmd = ( 'sed', '-i', 's|/swap.*|swap swap defaults 0 0|', '/etc/fstab' )
        self._Execute( cmd )
        cmd = ( 'mkswap', line.split(' ')[0] )
        self._Execute( cmd )
        cmd = ( 'swapon', '-a' )
        self._Execute( cmd )


    def _ImportTemplates( self ) :
        templdir  = '/home/qualys/template'
        templfile = os.path.join(templdir, 'templates.txt')
        for line in open(templfile) :
            line = line.rstrip()
            if len(line) == 0 or line.startswith('#') :
                continue
            name, dest = line.split(':')
            src = os.path.join( '/home/qualys/template', name )
            cmd = ( 'rsync', '-av', 'root@celeborn:'+src, dest )
            self._Execute( cmd )

    def _SetupLocalDirs( self ) :
        paths = ( '/local/qualys', )
        for path in paths :
            if not os.path.exists( path ) :
                os.makedirs( path )
            if path.endswith( '/qualys' ) :
                self._user.ChownDir( path )

    Execute = property( lambda self : self._args.execute )
    Verbose = property( lambda self : self._args.verbose )
    Quiet   = property( lambda self : self._args.quiet )

    def Main( self ) :
        self._ParseCmdLine( )
        if os.geteuid() != 0 :
            print >>sys.stderr, "This program needs to be run by root"
            sys.exit( 1 )
        self._RunYast( )
        self._SetupSwap( )
        self._ImportTemplates( )
        self._SetupLocalDirs( )

main = _Main( )
main.Main( )

### Local Variables: ***
### py-indent-offset:4 ***
### python-indent:4 ***
### python-continuation-offset:4 ***
### tab-width:4  ***
### End: ***
